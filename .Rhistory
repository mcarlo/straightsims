testM <- 16
x16 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 12870
testM <- 0
x0 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 16
x16
x15
testM <- 15
x15 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 11440
x15
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/fs2/weeklyApp_confidence')
shiny::runApp('GitHub/fs2/weeklyApp_confidence')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/fs2/weeklyApp_confidence')
curwd <- getwd()
setwd("C:/Users/Anichini/Documents/")
data <- read.csv("~/WEEK02_2015.csv", stringsAsFactors=FALSE)
winprob <- data$WinProbability
confidence<-data$Confidence
games<-length(winprob)
sims<-100000
points<-rep(0,sims)
for (i in 1:sims){
outcomes<-1*(runif(games,0,1)<winprob)
points[i]<-sum(outcomes*confidence)
}
quantile(points,c(.025,.5,.975))
setwd(curwd)
tax_cost_ratio_exploratory_201509 <- read.csv("~/tax_cost_ratio_exploratory_201509.csv", stringsAsFactors=FALSE)
View(tax_cost_ratio_exploratory_201509)
data <- read.csv("~/tax_cost_ratio_exploratory_201509.csv", stringsAsFactors=FALSE)
rm(list = ls())
data <- read.csv("~/tax_cost_ratio_exploratory_201509.csv", stringsAsFactors=FALSE)
rm(list = ls())
suppressWarnings(suppressMessages(library(data.table)))
suppressWarnings(suppressMessages(library(lubridate)))
library(scales)
data <- read.csv("~/tax_cost_ratio_exploratory_201509.csv", stringsAsFactors=FALSE)
dataDT <- data.table(data, key = Ticker)
dataDT <- data.table(data[-2, ], key = Ticker)
dataDT <- data.table(data[-2, ], key = "Ticker")
dataDT
rm(list = ls())
data <- read.csv("~/tax_cost_ratio_exploratory_201509.csv", stringsAsFactors=FALSE)
dataDT <- data.table(data[-2, ], key = "Ticker")
dataDT
table(dataDT[Morningstar.Category == "US OE Large Blend"]
)
table(dataDT[Morningstar.Category == "US OE Large Blend", Total.Ret..YTD...Mo.End...USD])
table(dataDT[Morningstar.Category])
table(dataDT[,Morningstar.Category])
dataDT[Morningstar.Category == ""]
data <- read.csv("~/tax_cost_ratio_exploratory_201509.csv", stringsAsFactors=FALSE)
head(data)
data <- read.csv("~/tax_cost_ratio_exploratory_201509.csv", stringsAsFactors=FALSE, header = T, skip = 1)
data <- read.csv("~/tax_cost_ratio_exploratory_201509.csv", stringsAsFactors=FALSE, header = T)
head(data)
dataDT <- data.table(data[-1, ], key = "Ticker")
table(dataDT[,Morningstar.Category])
dataDT[Morningstar.Category == "US OE Large Growth", Turnover.Ratio...Date]
table(dataDT[Morningstar.Category == "US OE Large Growth", Turnover.Ratio...Date])
dataDT[Morningstar.Category == "US OE Large Growth", ]
hist(dataDT[Morningstar.Category == "US OE Large Growth", Tax.Cost..Ratio..1.Yr..Mo.End.], rm.na = T)
plot(dataDT[Morningstar.Category == "US OE Large Growth", Tax.Cost..Ratio..1.Yr..Mo.End.])
plot(dataDT[Morningstar.Category == "US OE Large Growth", Total.Ret..1.Yr...Mo.End...USD], dataDT[Morningstar.Category == "US OE Large Growth", Tax.Cost..Ratio..1.Yr..Mo.End.])
plot(dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Total.Ret..1.Yr...Mo.End...USD], dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.])
plot(dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Total.Ret..1.Yr...Mo.End...USD], dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Trailing 1yr Total Return (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)")
dataDT[Tax.Cost..Ratio..1.Yr..Mo.End. > 10]
dataDT[Morningstar.Category == "US OE Large Growth" & Tax.Cost..Ratio..1.Yr..Mo.End. > 10]
dataDT[Morningstar.Category == "US OE Large Growth" & Tax.Cost..Ratio..1.Yr..Mo.End. > 15]
plot( dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Total.Ret..1.Yr...Mo.End...USD], xlab = "Trailing 1yr Tax Cost Ratio (%)", ylab = "Trailing 1yr Total Return (%)")
plot( dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover..Ratio..], xlab = "Trailing 1yr Tax Cost Ratio (%)", ylab = "Trailing 1yr Total Return (%)")
plot( dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover..Ratio..], xlab = "Trailing 1yr Tax Cost Ratio (%)", ylab = "Turnover Ratio (%)")
plot( dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover..Ratio..], dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)")
plot( dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover..Ratio..], dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)", main = "Tax Cost Ratio vs Turnover Ratio", sub = "US Large Growth Funds, Aug. 2015")
?par
par(mfcol = 1, mfrow = 3)
par(mfrow = c(1, 3))
plot( dataDT[Morningstar.Category == "US OE Large Value" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover..Ratio..], dataDT[Morningstar.Category == "US OE Large Value" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)", main = "Tax Cost Ratio vs Turnover Ratio, Aug. 2015\n US Large Value")
plot( dataDT[Morningstar.Category == "US OE Large Blend" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover..Ratio..], dataDT[Morningstar.Category == "US OE Large Blend" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)", main = "US Large Blend")
plot( dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover..Ratio..], dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)", main = "US Large Growth")
par(mfrow = c(3, 1))
plot( dataDT[Morningstar.Category == "US OE Large Value" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover..Ratio..], dataDT[Morningstar.Category == "US OE Large Value" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)", main = "Tax Cost Ratio vs Turnover Ratio, Aug. 2015\n US Large Value")
plot( dataDT[Morningstar.Category == "US OE Large Blend" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover..Ratio..], dataDT[Morningstar.Category == "US OE Large Blend" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)", main = "US Large Blend")
plot( dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover..Ratio..], dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)", main = "US Large Growth")
par(mfrow = c(3, 1), xlim = c(0, 800), ylim = c(0, 20))
par(mfrow = c(3, 1))
plot( dataDT[Morningstar.Category == "US OE Large Value" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover..Ratio..], dataDT[Morningstar.Category == "US OE Large Value" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)", main = "Tax Cost Ratio vs Turnover Ratio, Aug. 2015\n US Large Value", xlim = c(0, 800), ylim = c(0, 20)
plot( dataDT[Morningstar.Category == "US OE Large Blend" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover..Ratio..], dataDT[Morningstar.Category == "US OE Large Blend" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)", main = "US Large Blend", xlim = c(0, 800), ylim = c(0, 20)
plot( dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover..Ratio..], dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)", main = "US Large Growth", xlim = c(0, 800), ylim = c(0, 20)
par(mfrow = c(3, 1))
plot( dataDT[Morningstar.Category == "US OE Large Value" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover..Ratio..], dataDT[Morningstar.Category == "US OE Large Value" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)", main = "Tax Cost Ratio vs Turnover Ratio, Aug. 2015\n US Large Value", xlim = c(0, 800), ylim = c(0, 20))
plot( dataDT[Morningstar.Category == "US OE Large Blend" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover..Ratio..], dataDT[Morningstar.Category == "US OE Large Blend" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)", main = "US Large Blend", xlim = c(0, 800), ylim = c(0, 20))
plot( dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover..Ratio..], dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)", main = "US Large Growth", xlim = c(0, 800), ylim = c(0, 20))
dataDT[Turnover..Ratio..>500]
table(dataDT[Turnover..Ratio..>500, Morningstar.Category])
str(dataDT)
dataDT[, Turnover := as.integer(Turnover..Ratio..)]
plot( dataDT[Morningstar.Category == "US OE Large Value" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover], dataDT[Morningstar.Category == "US OE Large Value" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)", main = "Tax Cost Ratio vs Turnover Ratio, Aug. 2015\n US Large Value", xlim = c(0, 800), ylim = c(0, 20))
plot( dataDT[Morningstar.Category == "US OE Large Blend" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover], dataDT[Morningstar.Category == "US OE Large Blend" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)", main = "US Large Blend", xlim = c(0, 800), ylim = c(0, 20))
plot( dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Turnover], dataDT[Morningstar.Category == "US OE Large Growth" & !is.na(Tax.Cost..Ratio..1.Yr..Mo.End.), Tax.Cost..Ratio..1.Yr..Mo.End.], xlab = "Turnover Ratio (%)", ylab = "Trailing 1yr Tax Cost Ratio (%)", main = "US Large Growth", xlim = c(0, 800), ylim = c(0, 20))
dataDT[Turnover > 500]
dataDT[Turnover > 500 & Morningstar.Category %in% c("US OE Large Growth", "US OE Large Blend", "US OE Large Value")]
curwd <- getwd()
setwd("C:/Users/Anichini/Documents/")
data <- read.csv("~/WEEK03_2015.csv", stringsAsFactors=FALSE)
winprob <- data$WinProbability
confidence<-data$Confidence
games<-length(winprob)
sims<-100000
points<-rep(0,sims)
for (i in 1:sims){
outcomes<-1*(runif(games,0,1)<winprob)
points[i]<-sum(outcomes*confidence)
}
quantile(points,c(.025,.5,.975))
setwd(curwd)
rm(list = ls())
#setwd("D:/Documents/GitHub/straightsims")
load("straightStartSpecific.Rdata")
weekFile <- read.csv("~/WEEK03_2015.csv", stringsAsFactors = F) #read.csv("D:/WTP/WEEK01_2015.csv", stringsAsFactors = F)
weekFile <- weekFile[order(weekFile$YahooOrder), ]
winprob <- weekFile$WinProbability
nGames <- length(winprob)
set.seed(nGames)
outcomeMatrix <- matrix(runif(nGames * 1700) < winprob, ncol = 1700)
# outcomeMatrix[, 1:10]
comparisonPicks <- comparisonPicks16
fanMatrix <- fanMatrix16
if (nGames == 14) {
comparisonPicks <- comparisonPicks14
fanMatrix <- fanMatrix14
} else if (nGames == 13) {
comparisonPicks <- comparisonPicks13
fanMatrix <- fanMatrix13
} else if (nGames == 15) {
comparisonPicks <- comparisonPicks15
fanMatrix <- fanMatrix15
}
rm(comparisonPicks13, comparisonPicks14, comparisonPicks15, comparisonPicks16,
fanMatrix13, fanMatrix14, fanMatrix15, fanMatrix16)
comparisonPicksScores <- crossprod(outcomeMatrix, comparisonPicks) + crossprod((1- outcomeMatrix), (1 - comparisonPicks))
fanprob <- weekFile$StraightFans
fanMatrix <- matrix((fanMatrix < fanprob) * 1, nrow = nGames)
fanScores <- crossprod(outcomeMatrix, fanMatrix) + crossprod((1- outcomeMatrix), (1 - fanMatrix))
fanSubset <- matrix(rep(0, 1700 * 250), nrow = 1700)
sampleFans <- matrix(sample(1:1700, 1700 * 250, replace = T), nrow = 1700)
for (i in 1:1700){
fanSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
rm(fanScores)
calcTactics <- function(size){#size=40
fanScoreSubset <- fanSubset[, 1:size]
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTiedorFirst <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
fansFirst <- 1 * (fanScoreSubset == apply(fanScoreSubset, 1, max))
fansTiedorFirstCount <- rowSums(fansFirst)
fansTiedorFirstAvg <- sum(fansTiedorFirstCount)/(100 * size)
fansFirstCount <- rep(0, 1700)
fansFirstCount[fansTiedorFirstCount == 1] <- 1
fansFirstAvg <- sum(fansFirstCount)/(100 * size)
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
lenOut <- length(outright)
outPoints <- t(comparisonPicks[, outright]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, outright])) %*% (1 - weekFile$WinProbability)
if (length(outright) > 1){
maxOut <- outPoints[which(outPoints == max(outPoints))[1]]
outright <- outright[which(outPoints == maxOut)[1]]
outPoints <- maxOut
}
outPicksPoints <- sum(comparisonFirst[, outright]/fansTiedorFirstCount)
outPicks = comparisonPicks[, outright]
outTeams = weekFile$Victor
outTeams[outPicks == 0] <- weekFile$Underdog[outPicks==0]
mostwins <- which(colSums(comparisonTiedorFirst/fansTiedorFirstCount) == max(colSums(comparisonTiedorFirst/fansTiedorFirstCount)))
lenMost <- length(mostwins)
mostPoints <- t(comparisonPicks[, mostwins]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, mostwins])) %*% (1 - weekFile$WinProbability)
if (length(mostwins) > 1){
maxMost <- mostPoints[which(mostPoints == max(mostPoints))[1]]
mostwins <- mostwins[which(mostPoints == maxMost)[1]]
mostPoints <- maxMost
}
mostPicksPoints <- sum(comparisonTiedorFirst[, mostwins]/fansTiedorFirstCount)
mostPicks = comparisonPicks[, mostwins]
mostTeams = weekFile$Victor
mostTeams[mostPicks == 0] <- weekFile$Underdog[mostPicks==0]
data <- list(outright, mostwins, outPoints = outPoints, mostPoints = mostPoints, numOutright = lenOut, numWins = lenMost, outPicks = outPicks, mostPicks = mostPicks, outW = colSums(comparisonFirst)[outright]/100, mostW = colSums(comparisonTiedorFirst)[mostwins]/100, outTeams = outTeams, mostTeams = mostTeams, avgOut = fansFirstAvg, avgMost = fansTiedorFirstAvg, outPicksPoints = outPicksPoints, mostPicksPoints = mostPicksPoints)
data
}
popList <- function(size){list(size, calcTactics(size))}
system.time(firstList <- popList(25))
compTactics <- function(inputList, reps){
fanSizes <- seq(5, 5 * reps, by = 5)
outputList <- rep(inputList, reps)
for(i in 1:reps)  {#i = 2
size <- fanSizes[i]
genList <- popList(size)
outputList[[2*(i - 1) + 1]] <- genList[[1]]
outputList[[2*i]] <- genList[[2]]
}
outputList
}
save(weekFile, firstList, compTactics, popList, calcTactics, fanSubset, comparisonPicks, comparisonPicksScores, file = "2015wk03.RData")
setwd("~/GitHub/straightsims")
rm(list = ls())
#setwd("D:/Documents/GitHub/straightsims")
load("straightStartSpecific.Rdata")
weekFile <- read.csv("~/WEEK03_2015.csv", stringsAsFactors = F) #read.csv("D:/WTP/WEEK01_2015.csv", stringsAsFactors = F)
weekFile <- weekFile[order(weekFile$YahooOrder), ]
winprob <- weekFile$WinProbability
nGames <- length(winprob)
set.seed(nGames)
outcomeMatrix <- matrix(runif(nGames * 1700) < winprob, ncol = 1700)
# outcomeMatrix[, 1:10]
comparisonPicks <- comparisonPicks16
fanMatrix <- fanMatrix16
if (nGames == 14) {
comparisonPicks <- comparisonPicks14
fanMatrix <- fanMatrix14
} else if (nGames == 13) {
comparisonPicks <- comparisonPicks13
fanMatrix <- fanMatrix13
} else if (nGames == 15) {
comparisonPicks <- comparisonPicks15
fanMatrix <- fanMatrix15
}
rm(comparisonPicks13, comparisonPicks14, comparisonPicks15, comparisonPicks16,
fanMatrix13, fanMatrix14, fanMatrix15, fanMatrix16)
comparisonPicksScores <- crossprod(outcomeMatrix, comparisonPicks) + crossprod((1- outcomeMatrix), (1 - comparisonPicks))
fanprob <- weekFile$StraightFans
fanMatrix <- matrix((fanMatrix < fanprob) * 1, nrow = nGames)
fanScores <- crossprod(outcomeMatrix, fanMatrix) + crossprod((1- outcomeMatrix), (1 - fanMatrix))
fanSubset <- matrix(rep(0, 1700 * 250), nrow = 1700)
sampleFans <- matrix(sample(1:1700, 1700 * 250, replace = T), nrow = 1700)
for (i in 1:1700){
fanSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
rm(fanScores)
calcTactics <- function(size){#size=40
fanScoreSubset <- fanSubset[, 1:size]
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTiedorFirst <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
fansFirst <- 1 * (fanScoreSubset == apply(fanScoreSubset, 1, max))
fansTiedorFirstCount <- rowSums(fansFirst)
fansTiedorFirstAvg <- sum(fansTiedorFirstCount)/(100 * size)
fansFirstCount <- rep(0, 1700)
fansFirstCount[fansTiedorFirstCount == 1] <- 1
fansFirstAvg <- sum(fansFirstCount)/(100 * size)
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
lenOut <- length(outright)
outPoints <- t(comparisonPicks[, outright]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, outright])) %*% (1 - weekFile$WinProbability)
if (length(outright) > 1){
maxOut <- outPoints[which(outPoints == max(outPoints))[1]]
outright <- outright[which(outPoints == maxOut)[1]]
outPoints <- maxOut
}
outPicksPoints <- sum(comparisonFirst[, outright]/fansTiedorFirstCount)
outPicks = comparisonPicks[, outright]
outTeams = weekFile$Victor
outTeams[outPicks == 0] <- weekFile$Underdog[outPicks==0]
mostwins <- which(colSums(comparisonTiedorFirst/fansTiedorFirstCount) == max(colSums(comparisonTiedorFirst/fansTiedorFirstCount)))
lenMost <- length(mostwins)
mostPoints <- t(comparisonPicks[, mostwins]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, mostwins])) %*% (1 - weekFile$WinProbability)
if (length(mostwins) > 1){
maxMost <- mostPoints[which(mostPoints == max(mostPoints))[1]]
mostwins <- mostwins[which(mostPoints == maxMost)[1]]
mostPoints <- maxMost
}
mostPicksPoints <- sum(comparisonTiedorFirst[, mostwins]/fansTiedorFirstCount)
mostPicks = comparisonPicks[, mostwins]
mostTeams = weekFile$Victor
mostTeams[mostPicks == 0] <- weekFile$Underdog[mostPicks==0]
data <- list(outright, mostwins, outPoints = outPoints, mostPoints = mostPoints, numOutright = lenOut, numWins = lenMost, outPicks = outPicks, mostPicks = mostPicks, outW = colSums(comparisonFirst)[outright]/100, mostW = colSums(comparisonTiedorFirst)[mostwins]/100, outTeams = outTeams, mostTeams = mostTeams, avgOut = fansFirstAvg, avgMost = fansTiedorFirstAvg, outPicksPoints = outPicksPoints, mostPicksPoints = mostPicksPoints)
data
}
popList <- function(size){list(size, calcTactics(size))}
system.time(firstList <- popList(25))
compTactics <- function(inputList, reps){
fanSizes <- seq(5, 5 * reps, by = 5)
outputList <- rep(inputList, reps)
for(i in 1:reps)  {#i = 2
size <- fanSizes[i]
genList <- popList(size)
outputList[[2*(i - 1) + 1]] <- genList[[1]]
outputList[[2*i]] <- genList[[2]]
}
outputList
}
save(weekFile, firstList, compTactics, popList, calcTactics, fanSubset, comparisonPicks, comparisonPicksScores, file = "2015wk03.RData")
t(confidence) %*% (winprob * (1 - winprob))
maxReps <- 20
playersBest <- rep(firstList, maxReps)
system.time(playersBest <- compTactics(firstList, maxReps))
save(weekFile, playersBest, file = "weeklyApp_straight/app2015wk03.RData")
curwd <- getwd()
setwd("C:/Users/Anichini/Documents/")
data <- read.csv("~/WEEK03_2015.csv", stringsAsFactors=FALSE)
winprob <- data$WinProbability
confidence<-data$Confidence
games<-length(winprob)
sims<-100000
points<-rep(0,sims)
for (i in 1:sims){
outcomes<-1*(runif(games,0,1)<winprob)
points[i]<-sum(outcomes*confidence)
}
quantile(points,c(.025,.5,.975))
t(confidence) %*% (winprob * (1 - winprob))
sqrt(t(confidence) %*% (winprob * (1 - winprob)))
sqrt(t(confidence * confidence) %*% (winprob * (1 - winprob)))
mu <- t(confidence) %*% winprob
sigma <- sqrt(t(confidence * confidence) %*% (winprob * (1 - winprob)))
mu - 1.645 * sigma
mu - 1.95 * sigma
mu - 1.96 * sigma
mu + 1.96 * sigma
setwd(curwd)
setwd("~/GitHub/straightsims/weeklyApp_straight")
rm(list = ls())
shiny::runApp()
setwd("~/GitHub/fs2")
rm(list = ls())
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile("~/WEEK03_2015.csv")  #
simDogs <- simDogs16
simFavs <- simFavs16
simOutcomes2 <- simOutcomes2_16
simPicks <- simPicks16
simplayerCols <- simplayerCols16
simPrior <- simPrior16
simRand <- simRand16
simRaw <- simRaw16
upsetMatrix <- upsetMatrix16
upsetDiagMatrix <- upsetDiagMatrix16
fanIndex <- fanIndex16
conditionGames(nGames = games)
genMtx() #strategies
simParams()
littleSim()
popConfList <- function(size){list(size, calcWinners(size))}
results05 <- popConfList(5)
resultsLists <- rep(results05, 20)
confTactics <- function(startList, maxSize = 100){
# maxSize must be divisible by 5
# startList <- results05
# maxSize <- 100
fanSizes <- seq(5, maxSize, by = 5)
maxIter <- maxSize/5
outList <- rep(startList, maxIter)
for(i in 1:maxIter)  { #i=1
size <- fanSizes[i]
genList <- popConfList(size)
outList[[2*(i - 1) + 1]] <- genList[[1]]
outList[[2*i]] <- genList[[2]]
}
outList
}
system.time(resultsLists <- confTactics(results05))
#setwd("D:/Documents/GitHub/fs2/weeklyApp_confidence")
save(resultsLists, gameRanks, strategies, weekFileConf, file = "weeklyApp_confidence/useWeeklyFile2015_03.RData")
shiny::runApp('weeklyApp_confidence')
rm(list = ls())
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile("~/WEEK03_2015.csv")  #
#processFile("D:/WTP/WEEK01_2015test13.csv") #"2014week15.csv")
simDogs <- simDogs16
simFavs <- simFavs16
simOutcomes2 <- simOutcomes2_16
simPicks <- simPicks16
simplayerCols <- simplayerCols16
simPrior <- simPrior16
simRand <- simRand16
simRaw <- simRaw16
upsetMatrix <- upsetMatrix16
upsetDiagMatrix <- upsetDiagMatrix16
fanIndex <- fanIndex16
conditionGames(nGames = games)
genMtx() #strategies
simParams()
littleSim()
popConfList <- function(size){list(size, calcWinners(size))}
results05 <- popConfList(5)
resultsLists <- rep(results05, 20)
confTactics <- function(startList, maxSize = 100){
# maxSize must be divisible by 5
# startList <- results05
# maxSize <- 100
fanSizes <- seq(5, maxSize, by = 5)
maxIter <- maxSize/5
outList <- rep(startList, maxIter)
for(i in 1:maxIter)  { #i=1
size <- fanSizes[i]
genList <- popConfList(size)
outList[[2*(i - 1) + 1]] <- genList[[1]]
outList[[2*i]] <- genList[[2]]
}
outList
}
system.time(resultsLists <- confTactics(results05))
#setwd("D:/Documents/GitHub/fs2/weeklyApp_confidence")
save(resultsLists, gameRanks, strategies, weekFileConf, file = "weeklyApp_confidence/useWeeklyFile2015_03.RData")
setwd("~/GitHub/fs2/weeklyApp_confidence")
shiny::runApp()
rm(list = ls())
setwd("~/GitHub/straightsims")
rm(list = ls())
#setwd("D:/Documents/GitHub/straightsims")
load("straightStartSpecific.Rdata")
weekFile <- read.csv("~/WEEK03_2015.csv", stringsAsFactors = F) #read.csv("D:/WTP/WEEK01_2015.csv", stringsAsFactors = F)
weekFile <- weekFile[order(weekFile$YahooOrder), ]
winprob <- weekFile$WinProbability
nGames <- length(winprob)
set.seed(nGames)
outcomeMatrix <- matrix(runif(nGames * 1700) < winprob, ncol = 1700)
# outcomeMatrix[, 1:10]
comparisonPicks <- comparisonPicks16
fanMatrix <- fanMatrix16
if (nGames == 14) {
comparisonPicks <- comparisonPicks14
fanMatrix <- fanMatrix14
} else if (nGames == 13) {
comparisonPicks <- comparisonPicks13
fanMatrix <- fanMatrix13
} else if (nGames == 15) {
comparisonPicks <- comparisonPicks15
fanMatrix <- fanMatrix15
}
rm(comparisonPicks13, comparisonPicks14, comparisonPicks15, comparisonPicks16,
fanMatrix13, fanMatrix14, fanMatrix15, fanMatrix16)
comparisonPicksScores <- crossprod(outcomeMatrix, comparisonPicks) + crossprod((1- outcomeMatrix), (1 - comparisonPicks))
fanprob <- weekFile$StraightFans
fanMatrix <- matrix((fanMatrix < fanprob) * 1, nrow = nGames)
fanScores <- crossprod(outcomeMatrix, fanMatrix) + crossprod((1- outcomeMatrix), (1 - fanMatrix))
fanSubset <- matrix(rep(0, 1700 * 250), nrow = 1700)
sampleFans <- matrix(sample(1:1700, 1700 * 250, replace = T), nrow = 1700)
for (i in 1:1700){
fanSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
rm(fanScores)
calcTactics <- function(size){#size=40
fanScoreSubset <- fanSubset[, 1:size]
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTiedorFirst <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
fansFirst <- 1 * (fanScoreSubset == apply(fanScoreSubset, 1, max))
fansTiedorFirstCount <- rowSums(fansFirst)
fansTiedorFirstAvg <- sum(fansTiedorFirstCount)/(100 * size)
fansFirstCount <- rep(0, 1700)
fansFirstCount[fansTiedorFirstCount == 1] <- 1
fansFirstAvg <- sum(fansFirstCount)/(100 * size)
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
lenOut <- length(outright)
outPoints <- t(comparisonPicks[, outright]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, outright])) %*% (1 - weekFile$WinProbability)
if (length(outright) > 1){
maxOut <- outPoints[which(outPoints == max(outPoints))[1]]
outright <- outright[which(outPoints == maxOut)[1]]
outPoints <- maxOut
}
outPicksPoints <- sum(comparisonFirst[, outright]/fansTiedorFirstCount)
outPicks = comparisonPicks[, outright]
outTeams = weekFile$Victor
outTeams[outPicks == 0] <- weekFile$Underdog[outPicks==0]
mostwins <- which(colSums(comparisonTiedorFirst/fansTiedorFirstCount) == max(colSums(comparisonTiedorFirst/fansTiedorFirstCount)))
lenMost <- length(mostwins)
mostPoints <- t(comparisonPicks[, mostwins]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, mostwins])) %*% (1 - weekFile$WinProbability)
if (length(mostwins) > 1){
maxMost <- mostPoints[which(mostPoints == max(mostPoints))[1]]
mostwins <- mostwins[which(mostPoints == maxMost)[1]]
mostPoints <- maxMost
}
mostPicksPoints <- sum(comparisonTiedorFirst[, mostwins]/fansTiedorFirstCount)
mostPicks = comparisonPicks[, mostwins]
mostTeams = weekFile$Victor
mostTeams[mostPicks == 0] <- weekFile$Underdog[mostPicks==0]
data <- list(outright, mostwins, outPoints = outPoints, mostPoints = mostPoints, numOutright = lenOut, numWins = lenMost, outPicks = outPicks, mostPicks = mostPicks, outW = colSums(comparisonFirst)[outright]/100, mostW = colSums(comparisonTiedorFirst)[mostwins]/100, outTeams = outTeams, mostTeams = mostTeams, avgOut = fansFirstAvg, avgMost = fansTiedorFirstAvg, outPicksPoints = outPicksPoints, mostPicksPoints = mostPicksPoints)
data
}
popList <- function(size){list(size, calcTactics(size))}
system.time(firstList <- popList(25))
compTactics <- function(inputList, reps){
fanSizes <- seq(5, 5 * reps, by = 5)
outputList <- rep(inputList, reps)
for(i in 1:reps)  {#i = 2
size <- fanSizes[i]
genList <- popList(size)
outputList[[2*(i - 1) + 1]] <- genList[[1]]
outputList[[2*i]] <- genList[[2]]
}
outputList
}
save(weekFile, firstList, compTactics, popList, calcTactics, fanSubset, comparisonPicks, comparisonPicksScores, file = "2015wk03.RData")
###
# rm(list = ls())
# setwd("D:/Documents/GitHub/straightsims")
#
# load("2015wk03.RData")
# system.time(compTactics(firstList, 5))
maxReps <- 20
playersBest <- rep(firstList, maxReps)
system.time(playersBest <- compTactics(firstList, maxReps))
# setwd("weeklyApp_straight")
save(weekFile, playersBest, file = "weeklyApp_straight/app2015wk03.RData")
shiny::runApp('weeklyApp_straight')
