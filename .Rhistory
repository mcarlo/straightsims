standard_names <- unique(standard_name_initial[, "Fund.Standard.Name"]
)
standard_name_initial[Oldest == RetMonths]
standard_name_initial[Oldest == RetMonths][standard_names, "Name"]
standard_name_initial[Oldest == RetMonths & Fund.Standard.Name == standard_names, "Name"]
standard_name_initial[Oldest == RetMonths & Fund.Standard.Name == standard_names, Name]
standard_name_initial[Oldest == RetMonths & Fund.Standard.Name == standard_names,
]
standard_name_initial[Oldest == RetMonths & Fund.Standard.Name == standard_names, ]
standard_name_initial[Oldest == RetMonths & Fund.Standard.Name == standard_names[, Fund.Standard.Name], Name]
standard_names
standard_names <- unique(standard_name_initial[, Fund.Standard.Name])
standard_name_initial[Oldest == RetMonths & Fund.Standard.Name == standard_names, Name]
setorder(standard_name_initial, Fund.Standard.Name, -RetMonths)
standard_name_initial
standard_name_initial[standard_names, ]
key(standard_name_initial)
setkey(standard_name_initial, Fund.Standard.Name)
key(standard_name_initial
)
standard_namesDT <- standard_name_initial[standard_names, ]
setorder(standard_name_initial, Fund.Standard.Name, -RetMonths, Name)
setkey(standard_name_initial, Fund.Standard.Name)
standard_namesDT <- standard_name_initial[standard_names, ]
standard_namesDT <- standard_namesDT[RetMonths == Oldest]
standard_namesDT[, RowOrder := match(Ticker, standard_namesDT[, Ticker)]
standard_namesDT[, RowOrder := match(Ticker, standard_namesDT[, Ticker])]
standard_namesDT
standard_namesDT[, minRowOrder := min(RowOrder, by = Fund.Standard.Name]
standard_namesDT[, minRowOrder := min(RowOrder), by = Fund.Standard.Name]
standard_namesDT
standard_namesDT[RowOrder == minRow]
standard_namesDT[RowOrder == minRowOrder]
key(standard_namesDT)
standard_namesDT[standard_name_initial[, Fund.Standard.Name], Name]
standard_name_initial[, Fund.Standard.Name]
standard_namesDT <- standard_namesDT[RowOrder == minRowOrder]
standard_name_initial[, Fund.Standard.Name]
standard_name_initial[, "SiblingName" := standard_namesDT[standard_name_initial[, Fund.Standard.Name], Name]]
standard_namesDT[standard_name_initial[, Fund.Standard.Name], Name]
standard_names[!(standard_names %in% standard_namesDT[, Fund.Standard.Name])]
standard_names %in% standard_namesDT[, Fund.Standard.Name]
unique(standard_names)
!(standard_names %in% standard_namesDT[, Fund.Standard.Name])
standard_names[!(standard_names %in% standard_namesDT[, Fund.Standard.Name])]
standard_names[(standard_names %in% standard_namesDT[, Fund.Standard.Name])]
standard_name_initial[, RowOrder := match(Ticker, standard_name_initial[, Ticker])]
standard_name_initial[, minRowOrder := min(RowOrder), by = Fund.Standard.Name]
standard_name_initial[, RowOrder := match(Ticker, standard_name_initial[, Ticker])]
standard_name_initial[, minRowOrder := min(RowOrder), by = Fund.Standard.Name]
standard_namesDT <- standard_name_initial[minRowOrder == RowOrder]
standard_namesDT
standard_namesDT
standard_namesDT[, stdCount := .N, by = Fund.Standard.Name]
standard_namesDT
standard_namesDT[stdCount > 1]
standard_namesDT <- standard_name_initial[minRowOrder == RowOrder & RetMonths == Oldest]
standard_namesDT[, stdCount := .N, by = Fund.Standard.Name]
standard_namesDT[stdCount > 1]
?min
standard_name[, RowOrder := match(Ticker, standard_name[, Ticker])]
standard_namesDT[, RowOrder := match(Ticker, standard_namesDT[, Ticker])]
standard_namesDT[, minRowOrder := min(RowOrder), by = Fund.Standard.Name]
standard_namesDT[RowOrder == minRowOrder]
rm(list = ls())
returnYYYY <- 2015
returnMM <- 07
suppressMessages(suppressWarnings(library(data.table)))
standard_name_initial <- read.csv("~/standard_name_initial.csv", stringsAsFactors=FALSE, header = T)
setnames(standard_name_initial, c("Name", "Ticker", "Fund.Standard.Name", "Inception"))
standard_name_initial <- data.table(standard_name_initial[-1,], key = "Fund.Standard.Name")
standardNames <- unique(standard_name_initial[, Fund.Standard.Name])
standard_name_initial[, `:=`(YYYY = as.integer(sapply(Inception, substr, start=1, stop=4)),
MM = as.integer(sapply(Inception, substr, start=6, stop=7)))]
standard_name_initial[, `:=`("RetMonths" = 12*(returnYYYY - YYYY) + (returnMM - MM))]
standard_name_initial[, "Oldest" := max(RetMonths), by = "Fund.Standard.Name"]
setorder(standard_name_initial, Fund.Standard.Name, -RetMonths, Name)
setkey(standard_name_initial, Fund.Standard.Name)
setorder(standard_name_initial, Fund.Standard.Name, -RetMonths, Name)
rows(standard_name_initial)
rownum(standard_name_initial)
row(standard_name_initial)
row(standard_name_initial[, Fund.Standard.Name])
row(standard_name_initial)[,1]
rm(list = ls())
returnYYYY <- 2015
returnMM <- 07
suppressMessages(suppressWarnings(library(data.table)))
standard_name_initial <- read.csv("~/standard_name_initial.csv", stringsAsFactors=FALSE, header = T)
setnames(standard_name_initial, c("Name", "Ticker", "Fund.Standard.Name", "Inception"))
standard_name_initial <- data.table(standard_name_initial[-1,], key = "Fund.Standard.Name")
standardNames <- unique(standard_name_initial[, Fund.Standard.Name])
standard_name_initial[, `:=`(YYYY = as.integer(sapply(Inception, substr, start=1, stop=4)),
MM = as.integer(sapply(Inception, substr, start=6, stop=7)))]
standard_name_initial[, `:=`("RetMonths" = 12*(returnYYYY - YYYY) + (returnMM - MM))]
standard_name_initial[, "Oldest" := max(RetMonths), by = "Fund.Standard.Name"]
setkey(standard_name_initial, Fund.Standard.Name)
setorder(standard_name_initial, Fund.Standard.Name, -RetMonths, Name)
standard_name_initial[, RowOrder := row(standard_name_initial)[,1]]
standard_name_initial
standard_name_initial[, `:=`(YYYYMM = 100*YYYY + MM)]
standard_name_initial[, RowOrder := row(standard_name_initial)[,1]]
standard_name_initial[, minRowOrder := min(RowOrder + YYYYMM), by = Fund.Standard.Name]
rm(list = ls())
returnYYYY <- 2015
returnMM <- 07
suppressMessages(suppressWarnings(library(data.table)))
standard_name_initial <- read.csv("~/standard_name_initial.csv", stringsAsFactors=FALSE, header = T)
setnames(standard_name_initial, c("Name", "Ticker", "Fund.Standard.Name", "Inception"))
standard_name_initial <- data.table(standard_name_initial[-1,], key = "Fund.Standard.Name")
standardNames <- unique(standard_name_initial[, Fund.Standard.Name])
standard_name_initial[, `:=`(YYYY = as.integer(sapply(Inception, substr, start=1, stop=4)),
MM = as.integer(sapply(Inception, substr, start=6, stop=7)))]
standard_name_initial[, `:=`("RetMonths" = 12*(returnYYYY - YYYY) + (returnMM - MM))]
standard_name_initial[, "Oldest" := max(RetMonths), by = "Fund.Standard.Name"]
setkey(standard_name_initial, Fund.Standard.Name)
setorder(standard_name_initial, Fund.Standard.Name, -RetMonths, Name)
standard_name_initial[, `:=`(YYYYMM = 100*YYYY + MM)]
standard_name_initial[, RowOrder := row(standard_name_initial)[,1] + YYYYMM]
standard_name_initial[, minRowOrder := min(RowOrder), by = Fund.Standard.Name]
standard_namesDT <- standard_name_initial[minRowOrder == RowOrder & RetMonths == Oldest]
standard_namesDT <- standard_name_initial[minRowOrder == RowOrder & RetMonths == Oldest]
standard_namesDT
standard_name_initial[, `:=`(SiblingName = standard_namesDT[standard_name_initial[,Name], Name],
SiblingTicker = standard_namesDT[standard_name_initial[,Name], Ticker])]
key(standard_namesDT)
key(standard_name_initial)
setkey(standard_name_initial, Name)
setkey(standard_namesDT, Name)
standard_name_initial[, `:=`(SiblingName = standard_namesDT[Fund.Standard.Name == standard_name_initial[,Fund.Standard.Name], Name],
SiblingTicker = standard_namesDT[Fund.Standard.Name == standard_name_initial[,Fund.Standard.Name], Ticker])]
standard_name_initial
standard_name_initial[, `:=`(SiblingName = "", SiblingTicker = "")]
standard_name_initial
standard_name_initial[RetMonths < 18 & Oldest >= 18, `:=`(SiblingName = standard_namesDT[RetMonths < 18 & Oldest >= 18][Fund.Standard.Name == standard_name_initial[,Fund.Standard.Name], Name],
SiblingTicker = standard_namesDT[RetMonths < 18 & Oldest >= 18][Fund.Standard.Name == standard_name_initial[,Fund.Standard.Name], Ticker])]
standard_name_initial[, `:=`(SiblingName = "", SiblingTicker = "")]
standard_name_initial[RetMonths < 18 & Oldest >= 18, SiblingName := standard_namesDT[Fund.Standard.Name == standard_name_initial[RetMonths < 18 & Oldest >= 18,Fund.Standard.Name], Name]]
standard_name_initial[, `:=`(SiblingName = "", SiblingTicker = "")]
standard_name_initial[, `:=`(SiblingName = "", SiblingTicker = "")]
standard_name_initial[RetMonths < 18 & Oldest >= 18, `:=`(SiblingName = standard_namesDT[Fund.Standard.Name == standard_name_initial[RetMonths < 18 & Oldest >= 18,Fund.Standard.Name], Name], SiblingTicker = standard_namesDT[Fund.Standard.Name == standard_name_initial[RetMonths < 18 & Oldest >= 18,Fund.Standard.Name], Ticker] )]
standard_name_initial
write.table(standard_name_initial[, .(Name, Ticker, Fund.Standard.Name, Inception, SiblingName, SiblingTicker)], "siblingMap.txt")
getwd()
setwd("~/")
write.table(standard_name_initial[, .(Name, Ticker, Fund.Standard.Name, Inception, SiblingName, SiblingTicker)], "siblingMap.txt")
write.table(standard_name_initial[, .(Name, Ticker, Fund.Standard.Name, Inception, SiblingName, SiblingTicker)], "siblingMap.txt", row.names = F)
?rbinom()
rbinom(1, 16, .5)
dbinom(0:16, 16, 0.5)
round(dbinom(0:16, 16, 0.5), 2)
qbinom(rep(.5, 16), 16, .5)
qbinom(.5, 16, .5)
qbinom(dbinom(0:16, 16, 0.5), 16, .5)
qbinom(dbinom(0:16, 16, 0.5), 16, .5)
qbinom(dbinom(rep(.5, 16), 16, 0.5), 16, dbinom(0:16, 16, 0.5))
warnings()
dbinom(0:16, 16, 0.5)
qbinom(rep(.5, 16), 16, dbinom(0:16, 16, 0.5))
qbinom(rep(.5, 16), 16, dbinom(0:16, 16, 0.5))
qbinom(rep(.5, 16), 16, dbinom(0:16, 16, 0.5))
round(dbinom(0:16, 16, 0.5), 2)
scoreDist <- round(dbinom(0:16, 16, 0.5), 6)
scoreDist <- cumsum(round(dbinom(0:16, 16, 0.5), 6))
?runif
set.seed(3)
draw <- runif(1)
randScore <- min(which(scoreDist > draw))
rm(list = ls())
nGames <- 16
scoreDist <- cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))
randScore <- function(draw) {min(which(scoreDist > draw))}
set.seed(3)
rm(list = ls())
nGames <- 16
scoreDist <- cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))
randScore <- function(draw) {min(which(scoreDist > draw))}
simPoolScores <- function(nPlayers){
draws <- runif(nPlayers)
sapply(draws, randScore)
}
set.seed(3)
simPoolScores(32)
rm(list = ls())
nGames <- 16
scoreDist <- function(nGames) {cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))}
randScore <- function(draw) {min(which(scoreDist > draw))}
simPoolScores <- function(nPlayers){
draws <- runif(nPlayers)
sapply(draws, randScore)
}
simPoolSeason <- function(nPlayers){
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){
nGames <- nGamesVec[i]
season[, j] <- scoreDist(nGames)
}
season
}
set.seed(3)
simPoolSeason(32)
simPoolSeason <- function(nPlayers){
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){
nGames <- nGamesVec[j]
season[, j] <- scoreDist(nGames)
}
season
}
simPoolSeason <- function(nPlayers){
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){
nGames <- nGamesVec[j]
season[, j] <- scoreDist(nGames)
}
apply(season, 1, sum)
}
set.seed(3)
simPoolSeason(32)
nPlayes = 32
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
rm(list = ls())
nGames <- 16
scoreDist <- function(nGames) {cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))}
randScore <- function(draw) {min(which(scoreDist > draw))}
simPoolScores <- function(nPlayers){
draws <- runif(nPlayers)
sapply(draws, randScore)
}
simPoolScores <- function(nPlayers, randScore){
draws <- runif(nPlayers)
sapply(draws, randScore)
}
scoreDist <- function(nGames) {cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))}
randScore <- function(draw, nGames) {min(which(scoreDist(nGames) > draw))}
simPoolScores <- function(nPlayers, rScores, numGames){
draws <- runif(nPlayers)
sapply(draws, randScore, draw = draws, nGames = numGames)
}
randScore(.6, 16)
randScore(.6, 16)
randScore(.6, 16)
randScore(runif(1), 16)
randScore(runif(1), 16)
randScore(runif(1), 16)
nPlayers = 32
draws <- runif(nPlayers)
randScore(draws, 16)
sapply(draws, randScore, nGames = 16)
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
simPoolSeason <- function(nPlayers){ #nPlayers = 32
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){# j = 1
nGames <- nGamesVec[j]
draws <- runif(nPlayers)
season[, j] <- sapply(draws, randScore, nGames)
}
apply(season, 1, sum)
}
set.seed(3)
simPoolSeason(32)
hist(simPoolSeason(32))
hist(simPoolSeason(32)/256)
hist(simPoolSeason(1)/256)
simPoolSeason(1)
simPoolSeason(1)
simPoolSeason(1)
simPoolSeason(100)
summary(simPoolSeason(100))
randScore <- function(draw, nGames) {min(which(scoreDist(nGames) > draw)) - 1}
simPoolScores <- function(nPlayers, rScores, numGames){
draws <- runif(nPlayers)
sapply(draws, randScore, draw = draws, nGames = numGames)
}
simPoolScores <- function(nPlayers, numGames){
draws <- runif(nPlayers)
sapply(draws, randScore, draw = draws, nGames = numGames)
}
simPoolScores(32, 16)
simPoolScores <- function(nPlayers, numGames){
draws <- runif(nPlayers)
sapply(draws, randScore, nGames = numGames)
}
simPoolScores(32, 16)
simPoolSeason <- function(nPlayers){ #nPlayers = 32
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){# j = 1
nGames <- nGamesVec[j]
#    draws <- runif(nPlayers)
season[, j] <- simPoolScores(nPlayers, nGames)# sapply(draws, randScore, nGames)
}
apply(season, 1, sum)
}
summary(simPoolSeason(100))
summary(simPoolSeason(100))
summary(simPoolSeason(200))
summary(simPoolSeason(200)/256)
summary(simPoolSeason(200)/256)
summary(simPoolSeason(200)/256)
summary(simPoolSeason(200)/256)
summary(simPoolSeason(2000)/256)
summary(simPoolSeason(20000)/256)
simPoolScores(32, 16)
simPoolScores(32, 16)
rm(list = ls())
nGames <- 16
scoreDist <- function(nGames) {cumsum(round(dbinom(0:nGames, nGames, 0.5), 6))}
randScore <- function(draw, nGames) {min(which(scoreDist(nGames) > draw)) - 1}
simPoolScores <- function(nPlayers, numGames){
draws <- runif(nPlayers)
sapply(draws, randScore, nGames = numGames)
}
simPoolSeason <- function(nPlayers){ #nPlayers = 32
season <- matrix(rep(0, nPlayers * 17), nrow = nPlayers)
nGamesVec <- c(rep(16, 3), 15, rep(14, 4), 13, rep(14, 2), rep(16, 6))
for (j in 1:17){# j = 1
nGames <- nGamesVec[j]
season[, j] <- simPoolScores(nPlayers, nGames)
}
apply(season, 1, sum)
}
summary(simPoolSeason(95))
summary(simPoolSeason(95))
summary(simPoolSeason(95))
dummy <- summary(simPoolSeason(95))
seasonDists <- matrix(rep(dummy, 100), ncol = 100)
set.seed(3)
dummy <- summary(simPoolSeason(95))
seasonDists <- matrix(rep(dummy, 100), ncol = 100)
for (j in 1:100){
seasonDists[, j] <- summary(simPoolSeason(95))
}
seasonDists <- matrix(rep(dummy, 100), nrow = 100)
names(dummy)
seasonDists <- matrix(rep(dummy, 100), nrow = 100)
colnames(seasonDists) <- names(dummy)
for (i in 1:100){
seasonDists[i, ] <- summary(simPoolSeason(95))
}
summary(seasonDists)
155/256
shiny::runApp('GitHub/straightsims')
shiny::runApp('GitHub/straightsims')
shiny::runApp('GitHub/straightsims')
shiny::runApp('GitHub/straightsims')
shiny::runApp('GitHub/straightsims')
rm(list = ls())
load("straightStart.Rdata")
rm(list = ls())
load("app2015wk01.RData")
setwd("~/GitHub/straightsims")
load("app2015wk01.RData")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/GitHub/straightsims")
rm(list = ls())
load("straightStart.Rdata")
weekFileOrig <- read.csv("2015week01straight.csv", stringsAsFactors = F)
weekFileOrig <- cbind(order = 1:16, weekFileOrig)
weekFile <- weekFileOrig[order(-weekFileOrig$WinProbability), ]
winprob <- weekFile$WinProbability[order(-weekFile$WinProbability)]
outcomeMatrix <- matrix(runif(16 * 1700) < winprob, nrow = 16)
weekFile
weekFileOrig <- read.csv("2015week01straight.csv", stringsAsFactors = F)
weekFileOrig <- cbind(order = 1:16, weekFileOrig)
weekFileOrig
weekFileOrig <- read.csv("2015week01straight.csv", stringsAsFactors = F)
weekFile <- weekFileOrig[order(-weekFileOrig$WinProbability), ]
winprob <- weekFile$WinProbability[order(-weekFile$WinProbability)]
outcomeMatrix <- matrix(runif(16 * 1700) < winprob, nrow = 16)
comparisonPicksScores <- crossprod(outcomeMatrix, comparisonPicks) + crossprod((1- outcomeMatrix), (1 - comparisonPicks))
fanprob <- weekFile$FanProb[order(-weekFile$WinProbability)]
fanMatrix <- matrix((fanMatrix < fanprob) * 1, nrow = 16)
fanScores <- crossprod(outcomeMatrix, fanMatrix) + crossprod((1- outcomeMatrix), (1 - fanMatrix))
fanSubset <- matrix(rep(0, 1700 * 250), nrow = 1700)
sampleFans <- matrix(sample(1:1700, 1700 * 250, replace = T), nrow = 1700)
for (i in 1:1700){
fanSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
rm(fanScores)
save.image("2015wk01.RData")
###
rm(list = ls())
load("2015wk01.RData")
# suppressMessages(library(foreach))
# suppressMessages(suppressWarnings(library(data.table)))
poolsize <- seq(5, 50, by = 5)
outright <- rep(1, 10)
mostwins <- rep(1, 10)
calcTactics <- function(size){#size=20
fanScoreSubset <- fanSubset[, 1:size]
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTiedorFirst <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
fansFirst <- 1 * (fanScoreSubset == apply(fanScoreSubset, 1, max))
fansTiedorFirstCount <- rowSums(fansFirst)
fansTiedorFirstAvg <- mean(fansTiedorFirstCount)/size*17
fansFirstCount <- rep(0, 1700)
fansFirstCount[fansTiedorFirstCount == 1] <- 1
fansFirstAvg <- mean(fansFirstCount)/size*17
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
lenOut <- length(outright)
outPoints <- t(comparisonPicks[, outright]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, outright])) %*% (1 - weekFile$WinProbability)
if (length(outright) > 1){
maxOut <- outPoints[which(outPoints == max(outPoints))[1]]
outright <- outright[which(outPoints == maxOut)[1]]
outPoints <- maxOut
}
mostwins <- which(colSums(comparisonTiedorFirst/fansTiedorFirstCount) == max(colSums(comparisonTiedorFirst/fansTiedorFirstCount)))
lenMost <- length(mostwins)
mostPoints <- t(comparisonPicks[, mostwins]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, mostwins])) %*% (1 - weekFile$WinProbability)
if (length(mostwins) > 1){
maxMost <- mostPoints[which(mostPoints == max(mostPoints))[1]]
mostwins <- mostwins[which(mostPoints == maxMost)[1]]
mostPoints <- maxMost
}
data <- list(outright, mostwins, outPoints = outPoints, mostPoints = mostPoints, numOutright = lenOut, numWins = lenMost, outPicks = comparisonPicks[, outright], mostPicks = comparisonPicks[, mostwins], outW = colSums(comparisonFirst)[outright]/100, mostW = colSums(comparisonTiedorFirst)[mostwins]/100, avgOut = fansFirstAvg, avgMost = fansTiedorFirstAvg)
data
}
popList <- function(size){list(size, calcTactics(size))}
system.time(firstList <- popList(20))
playersBest <- rep(firstList, 20)
# suppressMessages(suppressWarnings(library(data.table)))
fanSizes <- seq(5, 100, by = 5)
compTactics <- function(){
for(i in 2:20)  {#i = 2
size <- fanSizes[i]
genList <- popList(size)
playersBest[[2*(i - 1) + 1]] <<- genList[[1]]
playersBest[[2*i]] <<- genList[[2]]
}
}
system.time(compTactics())
###
# rm(list = ls())
# setwd("D:/Documents/GitHub/wtpP")
# load("app2015wk01.RData")
# for (i in 1:19){#i = 4
#   thisList <- playersBest[[2*i]]
#   nextList <- playersBest[[2*i + 2]]
#   if(is.null(try(dim(thisList$outPicks)[2]))) {next}
#
#   thisMatch <- match(data.frame(thisList$outPicks), data.frame(nextList$outPicks))
#   numMatchesThis <- sum(1 * !is.na(thisMatch))
#   if (numMatchesThis == 0){
#     thisList$outPicks <- thisList$outPicks[, 1]
#     next
#   } else {
#     nextMatch <- thisMatch[!is.na(thisMatch)]
#     thisList$outPicks <- thisList$outPicks[, which(!is.na(thisMatch))[1]]
#     nextList$outPicks <- thisList$outPicks
#   }
#   playersBest[[2 * i]] <- thisList
#   playersBest[[2 * i + 2]] <- nextList
#
#   print(i)
#   print(thisList$outPicks)
#   print(nextList$outPicks)
#   print(thisMatch)
#   print(nextMatch)
# }
# for (i in 1:19){#i = 4
#   thisList <- playersBest[[2*i]]
#   nextList <- playersBest[[2*i + 2]]
# if(is.null(try(dim(thisList$mostPicks)[2]))) {next}
#
#   thisMatch <- match(data.frame(thisList$mostPicks), data.frame(nextList$mostPicks))
#   numMatchesThis <- sum(1 * !is.na(thisMatch))
#   if (numMatchesThis == 0){
#     thisList$mostPicks <- thisList$mostPicks[, 1]
#     next
#   } else {
#     nextMatch <- thisMatch[!is.na(thisMatch)]
#     thisList$mostPicks <- thisList$mostPicks[, which(!is.na(thisMatch))[1]]
#     nextList$mostPicks <- thisList$mostPicks
#   }
#   playersBest[[2 * i]] <- thisList
#   playersBest[[2 * i + 2]] <- nextList
#
#   print(i)
#   print(thisList$mostPicks)
#   print(nextList$mostPicks)
#   print(thisMatch)
#   print(nextMatch)
# }
save(weekFile, weekFileOrig, playersBest, file = "app2015wk01.RData")
rm(list = ls())
library(shiny); library(scales)
setwd("~/GitHub/straightsims")
load("app2015wk01.RData")
shiny::runApp()
rm(list = ls())
load("app2015wk01.RData")
input <- data.frame(players = 35)
sizeIndex <-
input$players/5 * 2
results <-
playersBest[[sizeIndex()]]
playersBest[[sizeIndex
]]
outrightPicks <-
shiny::runApp()
