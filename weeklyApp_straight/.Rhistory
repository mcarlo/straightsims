account[, EndDate := dmy(END_ADVICE_DATE)] # sb < UserDate & >= cutoff
account[, DATE_CASE_ACCEPTED := NULL] # sb < UserDate & >= cutoff
account[, START_ADVICE_DATE := NULL] # sb < UserDate & >= cutoff
account[, END_ADVICE_DATE := NULL] # sb < UserDate & >= cutoff
save(account, file ="account.RData")
rm(HMAccount) #load("account.RData")
managedAccount <- account[GC_ADVICE_ACCEPTED == "Y" & ACCOUNT_ID > 0 & is.na(EndDate) & !is.na(AcceptanceDate) & !is.na(StartDate) & REALLOCATION_ALLOWED != "N"]
managedAccount[, REALLOCATION_ALLOWED := NULL]
save(managedAccount, file ="managedAccount.RData")
rm(account)#load("managedAccount.RData")
setkey(managedAccount, ACCOUNT_ID, GC_CASE_ID)
### HMGC_Case and maCase creation
HMGC_Case <- read.delim("HMGC_Case.txt", sep = ":",
stringsAsFactors=FALSE)
case <- data.table(HMGC_Case, key = "GC_CASE_ID")
setnames(case, "ACCOUNT", "ACCOUNT_ID")
setkey(case, ACCOUNT_ID, GC_CASE_ID)
case <- case[GC_PORTFOLIO_RISK_NR > 0 & ACCOUNT_ID > 0 & !is.na(GC_CASE_ID)]
case <- case[managedAccount, .(GC_CASE_ID, ACCOUNT_ID, PLAN_ID, GC_PORTFOLIO_RISK_NR)]
case <- case[!is.na(GC_PORTFOLIO_RISK_NR)]
save(case, file ="case.RData")
rm(HMGC_Case) #load("case.RData")
setkey(case, ACCOUNT_ID, GC_CASE_ID, PLAN_ID);
setkey(managedAccount, ACCOUNT_ID, GC_CASE_ID, PLAN_ID)
#rm(maCase)
maCase <- managedAccount[case]
save(maCase, file ="maCase.RData")
setkey(maCase, ACCOUNT_ID)
rm(case); rm(managedAccount) #load("maCase.RData")
### HMPortfolio
HMPortfolio <- read.delim("HMPortfolio.txt", sep = ":",
stringsAsFactors=FALSE)
portfolio <- data.table(HMPortfolio, key = "PORTFOLIO_ID")
setnames(portfolio, "ACCOUNT", "ACCOUNT_ID")
colnames(maCase)[colnames(maCase) %in% colnames(portfolio)]
portfolio <- portfolio[ TAX_TYPE == 1, .(PORTFOLIO_ID, ACCOUNT_ID, PARTICIPANT)]
save(portfolio, file ="portfolio.RData")
rm(HMPortfolio)
setkey(portfolio, ACCOUNT_ID)
maPortfolio <- maCase[portfolio]; rm(portfolio)
setkey(maPortfolio, PORTFOLIO_ID)
maPortfolio <- maPortfolio[!is.na(GC_PORTFOLIO_RISK_NR)]
save(maPortfolio, file ="maPortfolio.RData"); rm(maCase)#load("maPortfolio.RData")
### HMposition
HMposition <- read.delim("HMPosition.txt", sep = ":",
stringsAsFactors=FALSE)
position <- data.table(HMposition, key = "POSITION_ID")
position <- position[PORTFOLIO %in% unique(maPortfolio[,PORTFOLIO_ID])]
setnames(position, c("PORTFOLIO", "SECURITY"), c("PORTFOLIO_ID", "SECURITY_ID"))
position[,"USERDATE" := dmy(DATE_OF_USER_INFO)]
position <- position[RESTRICTED_FOR_PARTICIPANT != "Y"]
setkey(position, PORTFOLIO_ID);
#rm(position1); rm(position2)
save(position, file ="position.RData")
rm(HMposition) #load("position.RData")
position1 <- position[USERDATE >= cutoffDate & PORTFOLIO_ID %in% maPortfolio[,PORTFOLIO_ID], list(POSITION_ID, SECURITY_ID, PORTFOLIO_ID, TOTAL_VALUE, USERDATE)] #position1[PORTFOLIO_ID == 2258811]
maPosition <- maPortfolio[position1]
maPosition <- maPosition[AcceptanceDate <= USERDATE - ddays(7)] # maPosition[PORTFOLIO_ID == 2203286]
maPosition[is.na(GC_PORTFOLIO_RISK_NR)]
save(maPosition, file ="maPosition.RData")
rm(position); rm(position1); rm(maPortfolio)# load("maPosition.RData")
### HMSecurity
HMsecurity <- read.delim("HMSecurity.txt", sep = ":",
stringsAsFactors=FALSE)
security <- data.table(HMsecurity, key = "SECURITY_ID")
setkey(security, SECURITY_ID)
rm(HMsecurity);
#security <- security[SECURITY_TYPE != 1]
security <- unique(security[SECURITY_ID %in% maPosition[,SECURITY_ID] & SECURITY_TYPE == 4, list(SECURITY_ID, SECURITY_NAME, SECURITY_TYPE )])
save(security, file ="security.RData") #load("security.RData")
setkey(maPosition, SECURITY_ID);
maSecurity <- maPosition[security]
rm(maPosition)
save(maSecurity, file ="maSecurity.RData")
rm(security) #load("maSecurity.RData")
### HMSales_restriction
HMSales_restriction <- read.delim("HMSales_restriction.txt", sep = ":",
stringsAsFactors=FALSE)
restriction <- data.table(HMSales_restriction, key = "SALES_RESTRICTION_ID")
restriction <- restriction[AGE_UNCONSTRAINED >= 1]
setnames(restriction, c("SECURITY", "PLAN"), c("SECURITY_ID", "PLAN_ID"));
setkey(restriction, PLAN_ID, SECURITY_ID)
setkey(maSecurity, PLAN_ID, SECURITY_ID)
save(restriction, file ="restriction.RData")
rm(HMSales_restriction) #load("restriction.RData")
maSecurity <- maSecurity[!restriction]
### HMExposure
HMexposure <- read.delim("HMExposure.txt", sep = ":",
stringsAsFactors=FALSE)
exposure <- data.table(HMexposure, key = "EXPOSURE_ID")
save(exposure, file ="exposure.RData")
rm(HMexposure)
ACexposure <- exposure[TYPE_OF_EXPOSURE == 1, ]
MFexposure <- exposure[TYPE_OF_EXPOSURE == 3, ]
# exposure[EXPOSED_ENTITY %in% c(1:7) & TYPE_OF_EXPOSURE == 2] original 7 portfolios
secACexposure <- ACexposure[EXPOSED_ENTITY %in% maSecurity[, SECURITY_ID]]
setnames(secACexposure, "EXPOSED_ENTITY", "SECURITY_ID")
setkey(secACexposure, SECURITY_ID, EXPOSED_TO_WHAT) #key(secACexposure)
uniqueSecACexposure <- unique(secACexposure[, list(SECURITY_ID, EXPOSED_TO_WHAT, WEIGHT)])
uniqueSecACexposure[, `:=`(AC01 = 0, AC02 = 0, AC03 = 0, AC04 = 0, AC05 = 0,
AC06 = 0, AC07 = 0, AC08 = 0, AC09 = 0, AC10 = 0,
AC11 = 0, AC12 = 0, AC13 = 0, AC14 = 0, AC15 = 0)]
uniqueSecACexposure[EXPOSED_TO_WHAT == 1, AC01 := 0 + uniqueSecACexposure[EXPOSED_TO_WHAT == 1,WEIGHT]]
uniqueSecACexposure[EXPOSED_TO_WHAT == 2, AC02 := 0 + uniqueSecACexposure[EXPOSED_TO_WHAT == 2,WEIGHT]]
uniqueSecACexposure[EXPOSED_TO_WHAT == 3, AC03 := 0 + uniqueSecACexposure[EXPOSED_TO_WHAT == 3,WEIGHT]]
uniqueSecACexposure[EXPOSED_TO_WHAT == 4, AC04 := 0 + uniqueSecACexposure[EXPOSED_TO_WHAT == 4,WEIGHT]]
uniqueSecACexposure[EXPOSED_TO_WHAT == 5, AC05 := 0 + uniqueSecACexposure[EXPOSED_TO_WHAT == 5,WEIGHT]]
uniqueSecACexposure[EXPOSED_TO_WHAT == 6, AC06 := 0 + uniqueSecACexposure[EXPOSED_TO_WHAT == 6,WEIGHT]]
uniqueSecACexposure[EXPOSED_TO_WHAT == 7, AC07 := 0 + uniqueSecACexposure[EXPOSED_TO_WHAT == 7,WEIGHT]]
uniqueSecACexposure[EXPOSED_TO_WHAT == 8, AC08 := 0 + uniqueSecACexposure[EXPOSED_TO_WHAT == 8, WEIGHT]]
uniqueSecACexposure[EXPOSED_TO_WHAT == 9, AC09 := 0 + uniqueSecACexposure[EXPOSED_TO_WHAT == 9, WEIGHT]]
uniqueSecACexposure[EXPOSED_TO_WHAT == 10, AC10 := 0 + uniqueSecACexposure[EXPOSED_TO_WHAT == 10, WEIGHT]]
uniqueSecACexposure[EXPOSED_TO_WHAT == 11, AC11 := 0 + uniqueSecACexposure[EXPOSED_TO_WHAT == 11, WEIGHT]]
uniqueSecACexposure[EXPOSED_TO_WHAT == 12, AC12 := 0 + uniqueSecACexposure[EXPOSED_TO_WHAT == 12, WEIGHT]]
uniqueSecACexposure[EXPOSED_TO_WHAT == 13, AC13 := 0 + uniqueSecACexposure[EXPOSED_TO_WHAT == 13, WEIGHT]]
uniqueSecACexposure[EXPOSED_TO_WHAT == 14, AC14 := 0 + uniqueSecACexposure[EXPOSED_TO_WHAT == 14, WEIGHT]]
uniqueSecACexposure[EXPOSED_TO_WHAT == 15, AC15 := 0 + uniqueSecACexposure[EXPOSED_TO_WHAT == 15, WEIGHT]]
cols <- colnames(uniqueSecACexposure);
setcolorder(uniqueSecACexposure, cols)
uniqueSecACexposure[, EXPOSED_TO_WHAT := NULL]; uniqueSecACexposure[, WEIGHT := NULL]; #rm(securityExposure)
securityExposure <- uniqueSecACexposure[, `:=`(AC01 = sum(AC01), AC02 = sum(AC02),
AC03 = sum(AC03), AC04 = sum(AC04),
AC05 = sum(AC05), AC06 = sum(AC06),
AC07 = sum(AC07), AC08 = sum(AC08),
AC09 = sum(AC09), AC10 = sum(AC10),
AC11 = sum(AC11), AC12 = sum(AC12),
AC13 = sum(AC13), AC14 = sum(AC14),
AC15 = sum(AC15)), by = SECURITY_ID]
setkey(securityExposure, SECURITY_ID)
securityExposure <- unique(securityExposure)
securityExposure[SECURITY_ID == 1082221, AC06 := 11.89]
securityExposure[, TotalExposure := sum(AC01, AC02, AC03, AC04, AC05, AC06, AC07, AC08, AC09, AC10, AC11, AC12, AC13, AC14, AC15), by = SECURITY_ID]
# maSecurity[SECURITY_ID == securityExposure[TotalExposure > 101, SECURITY_ID]]
# plans[PLAN_ID == 32902]
# maPosition[PORTFOLIO_ID == 2071118]
# load("security.RData"); rm(security)
# security[SECURITY_ID == 1082221]
#max(securityExposure[, TotalExposure]); min(securityExposure[, TotalExposure]);
securityExposure <- securityExposure[TotalExposure <= 101]; #securityExposure[TotalExposure > 101]
securityExposure[, TotalExposure := NULL]; #key(securityExposure); key(maSecurity)
save(securityExposure, file ="securityExposure.RData")
setkey(maSecurity, SECURITY_ID); #key(maSecurity)
#maSecurity[!(SECURITY_ID %in% securityExposure[,SECURITY_ID])]
maSecurityExposure <- securityExposure[maSecurity]; #maSecurity[SECURITY_ID == 1082221]
maSecurityExposure[PLAN_ID == 22]
save(maSecurityExposure, file ="maSecurityExposure.RData"); rm(maSecurity) #load("maSecurityExposure.RData")
setkey(maSecurityExposure, PLAN_ID)
colnames(plans)[(colnames(plans) %in% colnames(maSecurityExposure))]
key(plans); key(maSecurityExposure);
maSecurityExposureTF <- plans[maSecurityExposure]; rm(maSecurityExposure)
save(maSecurityExposureTF, file ="maSecurityExposureTF.RData")
#load("maSecurityExposureTF.RData")
### HMGC_AC_Frontier & portfolio
HMGC_AC_Frontier <- read.delim("HMGC_AC_Frontier.txt", sep = ":", stringsAsFactors=FALSE)
HMGC_AC_portfolio <- read.delim("HMGC_AC_portfolio.txt", sep = ":", stringsAsFactors=FALSE)
setkey(trusts, TRUST_FAMILY_ID);
frontiers.dt <- data.table(HMGC_AC_portfolio)
setkey(frontiers.dt, GC_AC_PORTFOLIO_ID)
trusts[, GC_AC_FRONTIER := 1]; trusts[RISK_NUM != GC_AC_PORTFOLIO, GC_AC_FRONTIER := 2]  #trusts[, GC_AC_FRONTIER := NULL]
trusts[TRUST_FAMILY_ID == 443]
save(trusts, file = "trusts.RData")
setkey(trusts, "TRUST_FAMILY_ID", "TRUST_ID")
#table(trusts[, RISK_NUM], trusts[, GC_AC_FRONTIER])
#rm(trustFrontier);
trustFrontier <- unique(trusts[, .(TRUST_FAMILY_ID, TRUST_ID, GC_AC_FRONTIER, RISK_NUM)]); rm(trusts)
setnames(trustFrontier, "RISK_NUM", "GC_PORTFOLIO_RISK_NR")
setkey(trustFrontier, TRUST_FAMILY_ID, GC_PORTFOLIO_RISK_NR)
setkey(maSecurityExposureTF, TRUST_FAMILY_ID, GC_PORTFOLIO_RISK_NR)
maSecurityExposureTFfrontier <- trustFrontier[maSecurityExposureTF]
save(maSecurityExposureTFfrontier, file ="maSecurityExposureTFfrontier.RData")
rm(maSecurityExposureTF); #load("maSecurityExposureTFfrontier.RData")
setkey(maSecurityExposureTFfrontier, PORTFOLIO_ID); # rm(maACexposures)
maACexposures <- maSecurityExposureTFfrontier;
maACexposures[, PORTFOLIO_VALUE := sum(TOTAL_VALUE), by = .(PORTFOLIO_ID, PLAN_ID)]
maACexposures <- maACexposures[PORTFOLIO_VALUE > 100]
maACexposures <- unique(maACexposures[, .(AC01 = sum(AC01 * TOTAL_VALUE)/max(PORTFOLIO_VALUE, 1),
AC02 = sum(AC02 * TOTAL_VALUE)/max(PORTFOLIO_VALUE, 1),
AC03 = sum(AC03 * TOTAL_VALUE)/max(PORTFOLIO_VALUE, 1),
AC04 = sum(AC04 * TOTAL_VALUE)/max(PORTFOLIO_VALUE, 1),
AC05 = sum(AC05 * TOTAL_VALUE)/max(PORTFOLIO_VALUE, 1),
AC06 = sum(AC06 * TOTAL_VALUE)/max(PORTFOLIO_VALUE, 1),
AC07 = sum(AC07 * TOTAL_VALUE)/max(PORTFOLIO_VALUE, 1),
AC08 = sum(AC08 * TOTAL_VALUE)/max(PORTFOLIO_VALUE, 1),
AC09 = sum(AC09 * TOTAL_VALUE)/max(PORTFOLIO_VALUE, 1),
PORTFOLIO_VALUE, GC_PORTFOLIO_RISK_NR, GC_AC_FRONTIER),
by = .(PORTFOLIO_ID, PLAN_ID)])
save(maACexposures, file ="maACexposures.RData")
maACexposures[, .(count = .N,
AUM = sum(PORTFOLIO_VALUE)/1E6), by = GC_AC_FRONTIER]
maACexposures[is.na(GC_AC_FRONTIER), PORTFOLIO_ID]
save.image("importTables.RData") #rm(list = ls())
#load("importTables.RData")
maACexposures
MFexposure
ACexposure
### Calculate GCDM and its AC contributions
load("~/InvCommittee/portfolio_monitoring_thresholds/ac_riskTargets.RData")      # locate
targets[, GC_AC_FRONTIER := 1]
targets11[, GC_AC_FRONTIER := 2]
targets711 <- rbindlist(list(targets, targets11))
setnames(targets711, "RISK", "GC_PORTFOLIO_RISK_NR")
setkey(targets711, GC_AC_FRONTIER, GC_PORTFOLIO_RISK_NR)
setkey(maACexposures, GC_AC_FRONTIER, GC_PORTFOLIO_RISK_NR, PORTFOLIO_ID)
activePortExposures <- targets711[maACexposures]
activePortExposures[, Act01 := (AC01 - TAC01)]
activePortExposures[, Act02 := (AC02 - TAC02)]
activePortExposures[, Act03 := (AC03 - TAC03)]
activePortExposures[, Act04 := (AC04 - TAC04)]
activePortExposures[, Act05 := (AC05 - TAC05)]
activePortExposures[, Act06 := (AC06 - TAC06)]
activePortExposures[, Act07 := (AC07 - TAC07)]
activePortExposures[, Act08 := (AC08 - TAC08)]
activePortExposures[, Act09 := (AC09 - TAC09)]
activePortExposures[is.na(Act09)]
activePortExposures[, AC01 := NULL]
activePortExposures[, AC02 := NULL]
activePortExposures[, AC03 := NULL]
activePortExposures[, AC04 := NULL]
activePortExposures[, AC05 := NULL]
activePortExposures[, AC06 := NULL]
activePortExposures[, AC07 := NULL]
activePortExposures[, AC08 := NULL]
activePortExposures[, AC09 := NULL]
activePortExposures[, TAC01 := NULL]
activePortExposures[, TAC02 := NULL]
activePortExposures[, TAC03 := NULL]
activePortExposures[, TAC04 := NULL]
activePortExposures[, TAC05 := NULL]
activePortExposures[, TAC06 := NULL]
activePortExposures[, TAC07 := NULL]
activePortExposures[, TAC08 := NULL]
activePortExposures[, TAC09 := NULL]
activePortExposures <- activePortExposures[!is.na(GC_PORTFOLIO_RISK_NR)]
head(activePortExposures)
activePort <- matrix(activePortExposures[, cbind(Act01, Act02, Act03, Act04, Act05,
Act06, Act07, Act08, Act09)],
nrow = length(activePortExposures[,Act01]), ncol = 9)
head(activePort)
summary(activePort)
write.csv(activePort, paste0("activePort",reportDate, ".csv", sep = ""))
#write.csv(covAC2010, "covAC2010.csv")
portCount <- length(activePort[,1])
vectorGCDMsq <- rep(0, portCount)
dfAC_CTGCDM <- matrix(rep(0, portCount * 9), nrow = portCount, ncol = 9)
argMax <- rep(0, portCount)
covAC2010 <- as.matrix(read.csv("covAC2010.csv",
stringsAsFactors=FALSE, header = T)[,2:10])
for (i in seq(1:portCount)){
vectorGCDMsq[i] <- t(activePort[i,]) %*% (covAC2010 %*% activePort[i,])
cov_i <- covAC2010 %*% activePort[i,]
dfAC_CTGCDM[i,] <- t(activePort[i,] * cov_i)
argMax[i] <- which(dfAC_CTGCDM[i,] == max(dfAC_CTGCDM[i,]))
}
#rm(ac_CTGCDM)
ac_CTGCDM <- as.data.table(dfAC_CTGCDM)
setnames(ac_CTGCDM, c("V1", "V2", "V3", "V4", "V5", "V6", "V7", "V8", "V9"),
c("AC01", "AC02", "AC03", "AC04", "AC05", "AC06", "AC07", "AC08", "AC09"))
vectorGCDM <- sqrt(vectorGCDMsq)
ac_CTGCDM[, maxCTGCDM := apply(dfAC_CTGCDM, 1, max)/(2*vectorGCDM)]
ac_CTGCDM[, maxAC := argMax]
ac_CTGCDM
activePortExposures[, GCDM := vectorGCDM]
activePortExposures[, maxCTGCDM := ac_CTGCDM[, maxCTGCDM]]
activePortExposures[, argMax := ac_CTGCDM[, maxAC]]
activePortExposures[GCDM >= 10]
activePortExposures[maxCTGCDM >= 4 & GCDM < 10]
#write.csv(activePortExposures[PLAN_ID == 100], "activeWLF.csv")
#activePortExposures[GCDM > 10 & RISK == 5]
activePortExposures[GCDM < 10 & maxCTGCDM > 4]
# write.csv(activePortExposures, "actPortExp2015.csv")
gcdm10Ports <- activePortExposures[GCDM > 10 | maxCTGCDM > 4]
max(table(gcdm10Ports[, PLAN_ID]))
reportName <- paste0("gcdm10", reportDate, ".csv", sep = "")
write.csv(gcdm10Ports, reportName)
### ID holdings with weights more than 10% different from target
maSecurityExposureTFfrontier <- maSecurityExposureTFfrontier[PORTFOLIO_VALUE > 100]
maSecurityExposureTFfrontier[ , SEC_COUNT := .N, by = .(PORTFOLIO_ID, SECURITY_ID)]
maSecurityExposureTFfrontier[SEC_COUNT ==3]
maSecurityExposureTFfrontier[ , SEC_VALUE := sum(TOTAL_VALUE), by = .(PORTFOLIO_ID, SECURITY_ID)]
maSecurityExposureTFfrontier[ , WEIGHT := 100 * SEC_VALUE/PORTFOLIO_VALUE]
setkey(maSecurityExposureTFfrontier, PORTFOLIO_ID, SECURITY_ID)
maSecurityExposureTFfrontier <- unique(maSecurityExposureTFfrontier)
maHoldings <- unique(maSecurityExposureTFfrontier)
maHoldings[, TOTAL_WEIGHT := sum(WEIGHT), by = PORTFOLIO_ID]
max(maHoldings[, TOTAL_WEIGHT]); min(maHoldings[, TOTAL_WEIGHT])
maHoldings
setnames(MFexposure, c("EXPOSED_ENTITY", "EXPOSED_TO_WHAT"), c("TRUST_ID", "SECURITY_ID"))
setkey(MFexposure, TRUST_ID, SECURITY_ID)
setkey(maHoldings, TRUST_ID, SECURITY_ID, PORTFOLIO_ID)
setnames(MFexposure, "WEIGHT", "TARGET")
mfTargetsActual <- merge(MFexposure, maHoldings)
mfTargetsActual[, Active := WEIGHT - TARGET]
mfTargetsActual[is.na(Active), Active := Weight]
reportName <- paste0("mfActive10", reportDate, ".csv", sep = "")
write.csv(mfTargetsActual[abs(Active) > 10, .(PORTFOLIO_ID, TRUST_ID, WEIGHT, TARGET, Active)],
reportName)
MFexpNotHeld <- MFexposure[!maHoldings]
MFexpNotHeld <- MFexpNotHeld[TRUST_ID %in% unique(maHoldings[, TRUST_ID]) & TARGET > 10]
MFexpNotHeld
maHoldings[TRUST_ID %in% names(table(MFexpNotHeld[, TRUST_ID])[table(MFexpNotHeld[, TRUST_ID]) == 5])]
reportName <- paste0("mfActive10NotHeld", reportDate, ".csv", sep = "")
write.csv(MFexpNotHeld[TRUST_ID %in% maHoldings[, TRUST_ID] & TARGET > 10],
reportName)
maSecurityExposureTFfrontier[PORTFOLIO_ID == 2203286]
gcdm10Ports
maPosition[PORTFOLIO_ID == 2261110]
load("maPosition.RData")
maPosition[PORTFOLIO_ID == 2261110]
maPosition[PORTFOLIO_ID %in% gcdm10Ports[, PORTFOLIO_ID]]
setwd("~/GitHub/fs2")
rm(list = ls())
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile("~/WEEK01_2015.csv")
genMtx() #strategies
simParams()
littleSim()
popConfList <- function(size){list(size, calcWinners(size))}
results05 <- popConfList(5)
resultsLists <- rep(results05, 20)
confTactics <- function(startList, maxSize = 100){
# maxSize must be divisible by 5
# startList <- results05
# maxSize <- 100
fanSizes <- seq(5, maxSize, by = 5)
maxIter <- maxSize/5
outList <- rep(startList, maxIter)
for(i in 1:maxIter)  { #i=1
size <- fanSizes[i]
genList <- popConfList(size)
outList[[2*(i - 1) + 1]] <- genList[[1]]
outList[[2*i]] <- genList[[2]]
}
outList
}
system.time(resultsLists <- confTactics(results05))
save(resultsLists, gameRanks, strategies, weekFileConf, file = "useWeeklyFile.RData")
resultsListsCurrent <- resultsLists
setwd("~/GitHub/fs2/weeklyApp_confidence")
load("useWeeklyFile.RData")
resultsLists[[2]]
resultsListsCurrent[[2]]
setwd("~")
getwd()
setwd("C:/Users/Anichini/")
load("useWeeklyFile.RData")
resultsLists[[2]]
resultsListsCurrent[[2]]
resultsListsCurrent[[4]]
resultsLists[[4]]
resultsListsCurrent[[20]]
resultsLists[[20]]
setwd("~/GitHub/fs2/weeklyApp_confidence")
shiny::runApp()
setwd("~/GitHub/fs2")
rm(list = ls())
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile("~/WEEK01_2015.csv")
rm(list = ls())
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
#processFile("~/WEEK01_2015.csv")  #
processFile("D:/WTP/WEEK01_2015.csv") #"2014week15.csv")
genMtx() #strategies
simParams()
littleSim()
popConfList <- function(size){list(size, calcWinners(size))}
results05 <- popConfList(5)
resultsLists <- rep(results05, 20)
confTactics <- function(startList, maxSize = 100){
# maxSize must be divisible by 5
# startList <- results05
# maxSize <- 100
fanSizes <- seq(5, maxSize, by = 5)
maxIter <- maxSize/5
outList <- rep(startList, maxIter)
for(i in 1:maxIter)  { #i=1
size <- fanSizes[i]
genList <- popConfList(size)
outList[[2*(i - 1) + 1]] <- genList[[1]]
outList[[2*i]] <- genList[[2]]
}
outList
}
system.time(resultsLists <- confTactics(results05))
setwd("~/GitHub/fs2")
rm(list = ls())
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile("~/WEEK01_2015.csv")
genMtx() #strategies
simParams()
littleSim()
popConfList <- function(size){list(size, calcWinners(size))}
results05 <- popConfList(5)
resultsLists <- rep(results05, 20)
confTactics <- function(startList, maxSize = 100){
# maxSize must be divisible by 5
# startList <- results05
# maxSize <- 100
fanSizes <- seq(5, maxSize, by = 5)
maxIter <- maxSize/5
outList <- rep(startList, maxIter)
for(i in 1:maxIter)  { #i=1
size <- fanSizes[i]
genList <- popConfList(size)
outList[[2*(i - 1) + 1]] <- genList[[1]]
outList[[2*i]] <- genList[[2]]
}
outList
}
system.time(resultsLists <- confTactics(results05))
save(resultsLists, gameRanks, strategies, weekFileConf, file = "weeklyApp_confidence/useWeeklyFile.RData")
shiny::runApp('weeklyApp_confidence')
shiny::runApp('weeklyApp_confidence')
shiny::runApp('weeklyApp_confidence')
shiny::runApp('weeklyApp_confidence')
shiny::runApp('weeklyApp_confidence')
shiny::runApp('weeklyApp_confidence')
shiny::runApp('weeklyApp_confidence')
shiny::runApp('weeklyApp_confidence')
shiny::runApp('weeklyApp_confidence')
shiny::runApp('weeklyApp_confidence')
shiny::runApp('weeklyApp_confidence')
setwd("~/GitHub/straightsims")
rm(list = ls())
load("straightStart.Rdata")
weekFile <- read.csv("~/2015week01straight.csv", stringsAsFactors = F)
weekFile <- read.csv("~/WEEK01_2015.csv", stringsAsFactors = F)
weekFile <- weekFile[order(weekFile$YahooOrder), ]
winprob <- weekFile$WinProbability
outcomeMatrix <- matrix(runif(16 * 1700) < winprob, nrow = 16)
comparisonPicksScores <- crossprod(outcomeMatrix, comparisonPicks) + crossprod((1- outcomeMatrix), (1 - comparisonPicks))
fanprob <- weekFile$StraightFans
fanMatrix <- matrix((fanMatrix < fanprob) * 1, nrow = 16)
fanScores <- crossprod(outcomeMatrix, fanMatrix) + crossprod((1- outcomeMatrix), (1 - fanMatrix))
fanSubset <- matrix(rep(0, 1700 * 250), nrow = 1700)
sampleFans <- matrix(sample(1:1700, 1700 * 250, replace = T), nrow = 1700)
for (i in 1:1700){
fanSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
rm(fanScores)
calcTactics <- function(size){#size=40
fanScoreSubset <- fanSubset[, 1:size]
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTiedorFirst <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
fansFirst <- 1 * (fanScoreSubset == apply(fanScoreSubset, 1, max))
fansTiedorFirstCount <- rowSums(fansFirst)
fansTiedorFirstAvg <- sum(fansTiedorFirstCount)/(100 * size)
fansFirstCount <- rep(0, 1700)
fansFirstCount[fansTiedorFirstCount == 1] <- 1
fansFirstAvg <- sum(fansFirstCount)/(100 * size)
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
lenOut <- length(outright)
outPoints <- t(comparisonPicks[, outright]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, outright])) %*% (1 - weekFile$WinProbability)
if (length(outright) > 1){
maxOut <- outPoints[which(outPoints == max(outPoints))[1]]
outright <- outright[which(outPoints == maxOut)[1]]
outPoints <- maxOut
}
outPicksPoints <- sum(comparisonFirst[, outright]/fansTiedorFirstCount)
outPicks = comparisonPicks[, outright]
outTeams = weekFile$Victor
outTeams[outPicks == 0] <- weekFile$Underdog[outPicks==0]
mostwins <- which(colSums(comparisonTiedorFirst/fansTiedorFirstCount) == max(colSums(comparisonTiedorFirst/fansTiedorFirstCount)))
lenMost <- length(mostwins)
mostPoints <- t(comparisonPicks[, mostwins]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, mostwins])) %*% (1 - weekFile$WinProbability)
if (length(mostwins) > 1){
maxMost <- mostPoints[which(mostPoints == max(mostPoints))[1]]
mostwins <- mostwins[which(mostPoints == maxMost)[1]]
mostPoints <- maxMost
}
mostPicksPoints <- sum(comparisonTiedorFirst[, mostwins]/fansTiedorFirstCount)
mostPicks = comparisonPicks[, mostwins]
mostTeams = weekFile$Victor
mostTeams[mostPicks == 0] <- weekFile$Underdog[mostPicks==0]
data <- list(outright, mostwins, outPoints = outPoints, mostPoints = mostPoints, numOutright = lenOut, numWins = lenMost, outPicks = outPicks, mostPicks = mostPicks, outW = colSums(comparisonFirst)[outright]/100, mostW = colSums(comparisonTiedorFirst)[mostwins]/100, outTeams = outTeams, mostTeams = mostTeams, avgOut = fansFirstAvg, avgMost = fansTiedorFirstAvg, outPicksPoints = outPicksPoints, mostPicksPoints = mostPicksPoints)
data
}
popList <- function(size){list(size, calcTactics(size))}
system.time(firstList <- popList(5))
compTactics <- function(inputList, reps){
fanSizes <- seq(5, 5 * reps, by = 5)
outputList <- rep(inputList, reps)
for(i in 1:reps)  {#i = 2
size <- fanSizes[i]
genList <- popList(size)
outputList[[2*(i - 1) + 1]] <- genList[[1]]
outputList[[2*i]] <- genList[[2]]
}
outputList
}
save(weekFile, firstList, compTactics, popList, calcTactics, fanSubset, comparisonPicks, comparisonPicksScores, file = "2015wk01.RData"
save(weekFile, firstList, compTactics, popList, calcTactics, fanSubset, comparisonPicks, comparisonPicksScores, file = "2015wk01.RData")
maxReps <- 20
playersBest <- rep(firstList, maxReps)
system.time(playersBest <- compTactics(firstList, maxReps))
save(weekFile, playersBest, file = "weeklyApp_straight/app2015wk01.RData")
setwd("~/GitHub/straightsims/weeklyApp_straight")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(list = ls())
