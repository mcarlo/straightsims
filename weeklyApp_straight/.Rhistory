curwd <- getwd()
setwd("C:/Users/Anichini/Documents/")
data <- read.csv("~/week20.csv", header=F)
data
data <- read.csv("~/week01.csv", header=F)
data
winprob <- data[,1]
confidence<-data[,2]
games<-length(winprob)
sims<-100000
points<-rep(0,sims)
for (i in 1:sims){
outcomes<-1*(runif(games,0,1)<winprob)
points[i]<-sum(outcomes*confidence)
}
quantile(points,c(.025,.5,.975))
setwd(curwd)
nGames = 13
2^nGames
nGames = 16
2^nGames
nGames = 15
2^nGames
createSpaceN <- function(nGames = 16){ #nGames = 15
compPicksMatrix <- matrix(rep(1, nGames * (2^nGames)), nrow = nGames)
}
choose(16, 2)
choose(16, 3)
nCols <- function(nGames = 16){
count <- 0
for i in (1:nGames){
count <- count + choose(nGames, i)
}
count
}
nCols <- function(nGames = 16){
count = 0
for i in (1:nGames){
count <- count + choose(nGames, i)
}
count
}
nCols <- function(nGames = 16){
count = 0
for (i in 1:nGames){
count <- count + choose(nGames, i)
}
count
}
rm(list = ls())
library(combinat)
testM <- 1
x1 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 16
testM <- 2
x2 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 120
testM <- 3
x3 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 560
testM <- 4
x4 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 1820
# 1 + 16 + 120 + 560 + 1820 = 2517
testM <- 5
x5 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 4368
testM <- 6
x6 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 8008
testM <- 7
x7 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 11440
testM <- 8
x8 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 12870
testM <- 9
x9 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 16
testM <- 10
x10 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 800
testM <- 11
x11 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 560
testM <- 12
x12 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 1820
# 1 + 16 + 120 + 560 + 1820 = 2517
testM <- 13
x13 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 4368
testM <- 14
x14 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 8008
testM <- 15
x15 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 11440
testM <- 16
x16 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 12870
testM <- 0
x0 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 16
x16
x15
testM <- 15
x15 <- matrix(unlist(combn(1:16, m = testM)), nrow = testM) # 11440
x15
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/fs2/weeklyApp_confidence')
shiny::runApp('GitHub/fs2/weeklyApp_confidence')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/fs2/weeklyApp_confidence')
curwd <- getwd()
setwd("C:/Users/Anichini/Documents/")
data <- read.csv("~/WEEK02_2015.csv", stringsAsFactors=FALSE)
winprob <- data$WinProbability
confidence<-data$Confidence
games<-length(winprob)
sims<-100000
points<-rep(0,sims)
for (i in 1:sims){
outcomes<-1*(runif(games,0,1)<winprob)
points[i]<-sum(outcomes*confidence)
}
quantile(points,c(.025,.5,.975))
setwd(curwd)
setwd("~/GitHub/fs2/weeklyApp_confidence")
library(shinyapps)
accountInfo("winthatpool")
shinyapps::setAccountInfo(name='winthatpool',
token='ADC97CF366048E8CEFCF14847F986994',
secret='<SECRET>')
shinyapps::setAccountInfo(name='winthatpool',
token='ADC97CF366048E8CEFCF14847F986994',
secret='Y2WIBgyFDZk/0UzCc7J8+lUsoFcf8kgpkn/hOgCb')
shiny::runApp()
setwd("~/GitHub/straightsims/weeklyApp_straight")
shiny::runApp()
rm(list = ls())
suppressWarnings(suppressMessages(library(data.table)))
suppressWarnings(suppressMessages(library(lubridate)))
library(scales)
cutoffDate <- dmy(30062014)
reportDate <- 201506
reportDateDMY <- cutoffDate + dyears(1)
setwd("C:/gcdm")
source("processHMData.R")
plans <- genPlansDT(cutoffDate)
plans <- plans[!(PLAN_ID %in% c(37250, 24663))]
trusts <- genTrustsDT(reportDateDMY) #rm(trusts)
trusts[GC_AC_PORTFOLIO == 8] #trusts[TRUST_FAMILY_ID == 31295]
summary(trusts[, TRUST_FAMILY_ID])
account <- genAccountDT()
managed <- genManagedAcct(account)
case <- genCase(managed)
maCase <- genMAcase(managed, case)
portfolio <- genPort()
maPort <- genMAport(portfolio, maCase)
maPort[PORTFOLIO_ID == 2224929]
position <- genPosition(maPort)
maPosition <- genMAposition(position, maPort)
maPosition[PORTFOLIO_ID == 2224929]
security <- genSecurity(maPosition)
maSecurity <- genMAsecurity(maPosition, security)
maSecurity[PORTFOLIO_ID == 2224929]
exposure <- genExposure()
ACexposure <- exposure[TYPE_OF_EXPOSURE == 1, ]
MFexposure <- exposure[TYPE_OF_EXPOSURE == 3, ]
ACexposure
MFexposure
trustsNarrowed <- narrowTrusts(trusts, plans, maPort)
secExposure <- genSecExposure(ACexposure, maSecurity)
security[SECURITY_ID == 1158531]
maSecExp <- genMAsecExp(secExposure, maSecurity, plans)
trustsFr <- assignFrontiers2Trusts(trustsNarrowed)
trustsFr[is.na(GC_AC_FRONTIER)]
maSecExpTF <- assignTrusts2MAs(trustsFr, maSecExp)
table(maSecExpTF[is.na(TRUST_ID), PLAN_ID])
maACexposures <- calcACweights(maSecExpTF)
maACexposures
maACexposures[is.na(GC_AC_FRONTIER)]
table(maACexposures[is.na(GC_AC_FRONTIER), PLAN_ID])[order(table(maACexposures[is.na(GC_AC_FRONTIER), PLAN_ID]))]
plans[PLAN_ID == 520]
trusts[TRUST_FAMILY_ID == 23560]
trusts[TRUST_FAMILY_ID == 23560]
rm(list = ls())
suppressWarnings(suppressMessages(library(data.table)))
suppressWarnings(suppressMessages(library(lubridate)))
library(scales)
cutoffDate <- dmy(30062014)
reportDate <- 201506
reportDateDMY <- cutoffDate + dyears(1)
setwd("C:/gcdm")
source("processHMData.R")
plans <- genPlansDT(cutoffDate)
plans <- plans[!(PLAN_ID %in% c(37250, 24663))]
trusts <- genTrustsDT(reportDateDMY) #rm(trusts)
trusts
trusts[TRUST_FAMILY_ID == 23560]
plans[PLAN_ID == 520]
plans[PLAN_ID == 520, REBALANCE_DATE]
plans[TRUST_FAMILY_ID == 23560, REBALANCE_DATE]
tfList <- unique(plans[, .(TRUST_FAMILY_ID, REBALANCE_DATE)])
tfList
trusts[is.na(REBALANCE_DATE)]
trusts[is.na(REBALANCE_DATE) & TRUST_FAMILY_ID %in% tfList[, TRUST_FAMILY_ID]]
trusts[is.na(REBALANCE_DATE) & !(TRUST_FAMILY_ID %in% tfList[, TRUST_FAMILY_ID])]
setup()
HMTrust <- read.delim("HMTrust.txt", sep = ":",
stringsAsFactors=FALSE);
plans[PLAN_ID ==37250]
plans <- genPlansDT(cutoffDate)
plans[PLAN_ID ==37250]
HMTrust[HMTrust$TRUST_FAMILY == 23560,]
HMPlan <- read.delim("HMPlan.txt", sep = ":",
stringsAsFactors=FALSE)
HMPlan$PLAN_ID <- as.integer(HMPlan$PLAN_ID);
HMPlan[HMPlan$TRUST_FAMILY ==  23560,]
HMPlan[HMPlan$PLAN_ID ==  520,]
plans <- data.table(HMPlan, key = "PLAN_ID")
planFields <- colnames(plans)
plans[,"REBALANCE_DATE" := dmy(NEXT_REBALANCE_DATE)];
plans[,"ANNIVERSARY_DATE" := dmy(ANNIVERSARY_DATE)]
setnames(plans, c("TRUST_FAMILY", "RECORD_KEEPER"), c("TRUST_FAMILY_ID", "RECORD_KEEPER_ID"))
testPlanIDs <- plans[grepl("test", PLAN_NAME) & !grepl("Gastro", PLAN_NAME) | grepl("Test", PLAN_NAME) | grepl("Test", PLAN_NAME) | TEST_PLAN == "Y"| ADVICE_TERMINATED == "Y" | PLAN_ID %in% c(37250, 24663), PLAN_ID]
plans <- plans[REBALANCE_DATE >= cutoffDate & !(PLAN_ID %in% testPlanIDs),
list(PLAN_ID, TRUST_FAMILY_ID, PLAN_NAME, RECORD_KEEPER_ID, REBALANCE_DATE, ANNIVERSARY_DATE)]
plans[, X := NULL]
plans
plans[PLAN_ID ==  520,]
rm(list = ls())
suppressWarnings(suppressMessages(library(data.table)))
suppressWarnings(suppressMessages(library(lubridate)))
library(scales)
cutoffDate <- dmy(30062014)
reportDate <- 201506
reportDateDMY <- cutoffDate + dyears(1)
setwd("C:/gcdm")
source("processHMData.R")
plans <- genPlansDT(cutoffDate)
plans[
(PLAN_ID %in% c(37250, 24663))]
trusts <- genTrustsDT(reportDateDMY) #rm(trusts)
plans[TRUST_FAMILY_ID == 23560, REBALANCE_DATE]
trusts[TRUST_FAMILY_ID == 23560]
plans[TRUST_FAMILY_ID %in% trust[is.na(REBALANCE_DATE), TRUST_FAMILY_ID]]
plans[TRUST_FAMILY_ID %in% trusts[is.na(REBALANCE_DATE), TRUST_FAMILY_ID]]
plans[TRUST_FAMILY_ID == trusts[is.na(REBALANCE_DATE), TRUST_FAMILY_ID]]
plans[TRUST_FAMILY_ID == trusts[is.na(REBALANCE_DATE), TRUST_FAMILY_ID], REBALANCE_DATE]
plans[TRUST_FAMILY_ID == trusts[is.na(REBALANCE_DATE), TRUST_FAMILY_ID] & is.na( REBALANCE_DATE)]
plans[TRUST_FAMILY_ID == trusts[is.na(REBALANCE_DATE), TRUST_FAMILY_ID] & is.na(REBALANCE_DATE)]
length(plans[TRUST_FAMILY_ID == trusts[is.na(REBALANCE_DATE), TRUST_FAMILY_ID], REBALANCE_DATE])
length(trusts[is.na(REBALANCE_DATE), TRUST_FAMILY_ID])
length(trusts[is.na(REBALANCE_DATE), unique(TRUST_FAMILY_ID)])
length(unique(plans[TRUST_FAMILY_ID == trusts[is.na(REBALANCE_DATE), TRUST_FAMILY_ID], REBALANCE_DATE]))
length(plans[TRUST_FAMILY_ID == trusts[is.na(REBALANCE_DATE), TRUST_FAMILY_ID], REBALANCE_DATE])
tfNArebal <- unique(trusts[is.na(REBALANCE_DATE), TRUST_FAMILY_ID])
tfNArebal <- unique(trusts[is.na(REBALANCE_DATE), .(TRUST_FAMILY_ID, REBALANCE_DATE)])
unique(tfNArebal[, TRUST_FAMILY_ID])
setkey(plans, TRUST_FAMILY_ID)
plans[tfNArebal]
tfNArebal <- unique(trusts[is.na(REBALANCE_DATE) & TRUST_FAMILY_ID %in% plans[, TRUST_FAMILY_ID], .(TRUST_FAMILY_ID, REBALANCE_DATE)])
plans[tfNArebal]
plans[tfNArebal, .(TRUST_FAMILY_ID, REBALANCE_DATE)]
moreRebalDates <- plans[tfNArebal, .(TRUST_FAMILY_ID, REBALANCE_DATE)]
key(moreRebalDates)
trusts[is.na(REBALANCE_DATE) & TRUST_FAMILY_ID %in% moreRebalDates[, TRUST_FAMILY_ID], REBALANCE_DATE := moreRebalDates[trusts[is.na(REBALANCE_DATE) & TRUST_FAMILY_ID %in% moreRebalDates[, TRUST_FAMILY_ID], TRUST_FAMILY_ID], REBALANCE_DATE]]
trusts[is.na(REBALANCE_DATE)]
moreRebalDates
trusts[TRUST_FAMILY_ID == 33529]
plans <- genPlansDT(cutoffDate)
trusts <- genTrustsDT(reportDateDMY) #rm(trusts)
curwd <- getwd()
setwd("C:/Users/Anichini/Documents/")
data <- read.csv("~/WEEK02_2015.csv", stringsAsFactors=FALSE)
winprob <- data$WinProbability
confidence<-data$Confidence
games<-length(winprob)
sims<-100000
points<-rep(0,sims)
for (i in 1:sims){
outcomes<-1*(runif(games,0,1)<winprob)
points[i]<-sum(outcomes*confidence)
}
quantile(points,c(.025,.5,.975))
setwd(curwd)
rm(list = ls())
setwd("~/GitHub/fs2")
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile("~/WEEK02_2015.csv")  #
#processFile("D:/WTP/WEEK01_2015test13.csv") #"2014week15.csv")
simDogs <- simDogs16
simFavs <- simFavs16
simOutcomes2 <- simOutcomes2_16
simPicks <- simPicks16
simplayerCols <- simplayerCols16
simPrior <- simPrior16
simRand <- simRand16
simRaw <- simRaw16
upsetMatrix <- upsetMatrix16
upsetDiagMatrix <- upsetDiagMatrix16
fanIndex <- fanIndex16
conditionGames(nGames = games)
genMtx() #strategies
simParams()
littleSim()
popConfList <- function(size){list(size, calcWinners(size))}
results05 <- popConfList(5)
resultsLists <- rep(results05, 20)
confTactics <- function(startList, maxSize = 100){
# maxSize must be divisible by 5
# startList <- results05
# maxSize <- 100
fanSizes <- seq(5, maxSize, by = 5)
maxIter <- maxSize/5
outList <- rep(startList, maxIter)
for(i in 1:maxIter)  { #i=1
size <- fanSizes[i]
genList <- popConfList(size)
outList[[2*(i - 1) + 1]] <- genList[[1]]
outList[[2*i]] <- genList[[2]]
}
outList
}
system.time(resultsLists <- confTactics(results05))
#setwd("D:/Documents/GitHub/fs2/weeklyApp_confidence")
save(resultsLists, gameRanks, strategies, weekFileConf, file = "weeklyApp_confidence/useWeeklyFile2015_02.RData")
setwd("~/GitHub/fs2/weeklyApp_confidence")
shiny::runApp()
load("straightStartSpecific.Rdata")
weekFile <- read.csv("~/WEEK02_2015.csv", stringsAsFactors = F) #read.csv("D:/WTP/WEEK01_2015.csv", stringsAsFactors = F)
weekFile <- weekFile[order(weekFile$YahooOrder), ]
winprob <- weekFile$WinProbability
nGames <- length(winprob)
set.seed(nGames)
outcomeMatrix <- matrix(runif(nGames * 1700) < winprob, ncol = 1700)
# outcomeMatrix[, 1:10]
comparisonPicks <- comparisonPicks16
fanMatrix <- fanMatrix16
if (nGames == 14) {
comparisonPicks <- comparisonPicks14
fanMatrix <- fanMatrix14
} else if (nGames == 13) {
comparisonPicks <- comparisonPicks13
fanMatrix <- fanMatrix13
} else if (nGames == 15) {
comparisonPicks <- comparisonPicks15
fanMatrix <- fanMatrix15
}
rm(comparisonPicks13, comparisonPicks14, comparisonPicks15, comparisonPicks16,
fanMatrix13, fanMatrix14, fanMatrix15, fanMatrix16)
comparisonPicksScores <- crossprod(outcomeMatrix, comparisonPicks) + crossprod((1- outcomeMatrix), (1 - comparisonPicks))
fanprob <- weekFile$StraightFans
fanMatrix <- matrix((fanMatrix < fanprob) * 1, nrow = nGames)
fanScores <- crossprod(outcomeMatrix, fanMatrix) + crossprod((1- outcomeMatrix), (1 - fanMatrix))
fanSubset <- matrix(rep(0, 1700 * 250), nrow = 1700)
sampleFans <- matrix(sample(1:1700, 1700 * 250, replace = T), nrow = 1700)
for (i in 1:1700){
fanSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
rm(fanScores)
calcTactics <- function(size){#size=40
fanScoreSubset <- fanSubset[, 1:size]
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTiedorFirst <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
fansFirst <- 1 * (fanScoreSubset == apply(fanScoreSubset, 1, max))
fansTiedorFirstCount <- rowSums(fansFirst)
fansTiedorFirstAvg <- sum(fansTiedorFirstCount)/(100 * size)
fansFirstCount <- rep(0, 1700)
fansFirstCount[fansTiedorFirstCount == 1] <- 1
fansFirstAvg <- sum(fansFirstCount)/(100 * size)
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
lenOut <- length(outright)
outPoints <- t(comparisonPicks[, outright]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, outright])) %*% (1 - weekFile$WinProbability)
if (length(outright) > 1){
maxOut <- outPoints[which(outPoints == max(outPoints))[1]]
outright <- outright[which(outPoints == maxOut)[1]]
outPoints <- maxOut
}
outPicksPoints <- sum(comparisonFirst[, outright]/fansTiedorFirstCount)
outPicks = comparisonPicks[, outright]
outTeams = weekFile$Victor
outTeams[outPicks == 0] <- weekFile$Underdog[outPicks==0]
mostwins <- which(colSums(comparisonTiedorFirst/fansTiedorFirstCount) == max(colSums(comparisonTiedorFirst/fansTiedorFirstCount)))
lenMost <- length(mostwins)
mostPoints <- t(comparisonPicks[, mostwins]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, mostwins])) %*% (1 - weekFile$WinProbability)
if (length(mostwins) > 1){
maxMost <- mostPoints[which(mostPoints == max(mostPoints))[1]]
mostwins <- mostwins[which(mostPoints == maxMost)[1]]
mostPoints <- maxMost
}
mostPicksPoints <- sum(comparisonTiedorFirst[, mostwins]/fansTiedorFirstCount)
mostPicks = comparisonPicks[, mostwins]
mostTeams = weekFile$Victor
mostTeams[mostPicks == 0] <- weekFile$Underdog[mostPicks==0]
data <- list(outright, mostwins, outPoints = outPoints, mostPoints = mostPoints, numOutright = lenOut, numWins = lenMost, outPicks = outPicks, mostPicks = mostPicks, outW = colSums(comparisonFirst)[outright]/100, mostW = colSums(comparisonTiedorFirst)[mostwins]/100, outTeams = outTeams, mostTeams = mostTeams, avgOut = fansFirstAvg, avgMost = fansTiedorFirstAvg, outPicksPoints = outPicksPoints, mostPicksPoints = mostPicksPoints)
data
}
popList <- function(size){list(size, calcTactics(size))}
system.time(firstList <- popList(25))
compTactics <- function(inputList, reps){
fanSizes <- seq(5, 5 * reps, by = 5)
outputList <- rep(inputList, reps)
for(i in 1:reps)  {#i = 2
size <- fanSizes[i]
genList <- popList(size)
outputList[[2*(i - 1) + 1]] <- genList[[1]]
outputList[[2*i]] <- genList[[2]]
}
outputList
}
save(weekFile, firstList, compTactics, popList, calcTactics, fanSubset, comparisonPicks, comparisonPicksScores, file = "2015wk02.RData")
###
# rm(list = ls())
# setwd("D:/Documents/GitHub/straightsims")
#
# load("2015wk02.RData")
# system.time(compTactics(firstList, 5))
maxReps <- 20
playersBest <- rep(firstList, maxReps)
system.time(playersBest <- compTactics(firstList, maxReps))
# setwd("weeklyApp_straight")
save(weekFile, playersBest, file = "weeklyApp_straight/app2015wk02.RData")
setwd("~/GitHub/straightsims")
load("straightStartSpecific.Rdata")
weekFile <- read.csv("~/WEEK02_2015.csv", stringsAsFactors = F) #read.csv("D:/WTP/WEEK01_2015.csv", stringsAsFactors = F)
weekFile <- weekFile[order(weekFile$YahooOrder), ]
winprob <- weekFile$WinProbability
nGames <- length(winprob)
set.seed(nGames)
outcomeMatrix <- matrix(runif(nGames * 1700) < winprob, ncol = 1700)
# outcomeMatrix[, 1:10]
comparisonPicks <- comparisonPicks16
fanMatrix <- fanMatrix16
if (nGames == 14) {
comparisonPicks <- comparisonPicks14
fanMatrix <- fanMatrix14
} else if (nGames == 13) {
comparisonPicks <- comparisonPicks13
fanMatrix <- fanMatrix13
} else if (nGames == 15) {
comparisonPicks <- comparisonPicks15
fanMatrix <- fanMatrix15
}
rm(comparisonPicks13, comparisonPicks14, comparisonPicks15, comparisonPicks16,
fanMatrix13, fanMatrix14, fanMatrix15, fanMatrix16)
comparisonPicksScores <- crossprod(outcomeMatrix, comparisonPicks) + crossprod((1- outcomeMatrix), (1 - comparisonPicks))
fanprob <- weekFile$StraightFans
fanMatrix <- matrix((fanMatrix < fanprob) * 1, nrow = nGames)
fanScores <- crossprod(outcomeMatrix, fanMatrix) + crossprod((1- outcomeMatrix), (1 - fanMatrix))
fanSubset <- matrix(rep(0, 1700 * 250), nrow = 1700)
sampleFans <- matrix(sample(1:1700, 1700 * 250, replace = T), nrow = 1700)
for (i in 1:1700){
fanSubset[i, ] <- fanScores[i, sampleFans[i, ]]
}
rm(fanScores)
calcTactics <- function(size){#size=40
fanScoreSubset <- fanSubset[, 1:size]
comparisonFirst <- comparisonPicksScores > apply(fanScoreSubset, 1, max)
comparisonTiedorFirst <- comparisonPicksScores >= apply(fanScoreSubset, 1, max)
fansFirst <- 1 * (fanScoreSubset == apply(fanScoreSubset, 1, max))
fansTiedorFirstCount <- rowSums(fansFirst)
fansTiedorFirstAvg <- sum(fansTiedorFirstCount)/(100 * size)
fansFirstCount <- rep(0, 1700)
fansFirstCount[fansTiedorFirstCount == 1] <- 1
fansFirstAvg <- sum(fansFirstCount)/(100 * size)
outright <- which(colSums(comparisonFirst) == max(colSums(comparisonFirst)))
lenOut <- length(outright)
outPoints <- t(comparisonPicks[, outright]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, outright])) %*% (1 - weekFile$WinProbability)
if (length(outright) > 1){
maxOut <- outPoints[which(outPoints == max(outPoints))[1]]
outright <- outright[which(outPoints == maxOut)[1]]
outPoints <- maxOut
}
outPicksPoints <- sum(comparisonFirst[, outright]/fansTiedorFirstCount)
outPicks = comparisonPicks[, outright]
outTeams = weekFile$Victor
outTeams[outPicks == 0] <- weekFile$Underdog[outPicks==0]
mostwins <- which(colSums(comparisonTiedorFirst/fansTiedorFirstCount) == max(colSums(comparisonTiedorFirst/fansTiedorFirstCount)))
lenMost <- length(mostwins)
mostPoints <- t(comparisonPicks[, mostwins]) %*% weekFile$WinProbability +
t((1 - comparisonPicks[, mostwins])) %*% (1 - weekFile$WinProbability)
if (length(mostwins) > 1){
maxMost <- mostPoints[which(mostPoints == max(mostPoints))[1]]
mostwins <- mostwins[which(mostPoints == maxMost)[1]]
mostPoints <- maxMost
}
mostPicksPoints <- sum(comparisonTiedorFirst[, mostwins]/fansTiedorFirstCount)
mostPicks = comparisonPicks[, mostwins]
mostTeams = weekFile$Victor
mostTeams[mostPicks == 0] <- weekFile$Underdog[mostPicks==0]
data <- list(outright, mostwins, outPoints = outPoints, mostPoints = mostPoints, numOutright = lenOut, numWins = lenMost, outPicks = outPicks, mostPicks = mostPicks, outW = colSums(comparisonFirst)[outright]/100, mostW = colSums(comparisonTiedorFirst)[mostwins]/100, outTeams = outTeams, mostTeams = mostTeams, avgOut = fansFirstAvg, avgMost = fansTiedorFirstAvg, outPicksPoints = outPicksPoints, mostPicksPoints = mostPicksPoints)
data
}
popList <- function(size){list(size, calcTactics(size))}
system.time(firstList <- popList(25))
compTactics <- function(inputList, reps){
fanSizes <- seq(5, 5 * reps, by = 5)
outputList <- rep(inputList, reps)
for(i in 1:reps)  {#i = 2
size <- fanSizes[i]
genList <- popList(size)
outputList[[2*(i - 1) + 1]] <- genList[[1]]
outputList[[2*i]] <- genList[[2]]
}
outputList
}
save(weekFile, firstList, compTactics, popList, calcTactics, fanSubset, comparisonPicks, comparisonPicksScores, file = "2015wk02.RData")
###
# rm(list = ls())
# setwd("D:/Documents/GitHub/straightsims")
#
# load("2015wk02.RData")
# system.time(compTactics(firstList, 5))
maxReps <- 20
playersBest <- rep(firstList, maxReps)
system.time(playersBest <- compTactics(firstList, maxReps))
# setwd("weeklyApp_straight")
save(weekFile, playersBest, file = "weeklyApp_straight/app2015wk02.RData")
setwd("~/GitHub/straightsims/weeklyApp_straight")
shiny::runApp()
