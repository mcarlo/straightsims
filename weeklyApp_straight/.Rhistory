fanRanks <- rep(c(sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games)), each = iterations)
fanRanks <- matrix(fanRanks, nrow = games * numFans, ncol = iterations)
head(fanRanks)
fanRanks <- rep(c(sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games)), each = iterations)
fanRanks <- rep(c(sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games)), each = iterations)
head(fanRanks)
fanRanks <- rep(c(sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games),
sample(1:games, games)), each = iterations)
fanRanks <- matrix(t(fanRanks), nrow = games * numFans, ncol = iterations, byrow = T)
head(fanRanks)
fanRanks <- matrix(fanRanks, nrow = games, nncol = numFans * iterations)
fanRanks <- matrix(fanRanks, nrow = games, ncol = numFans * iterations)
head(fanRanks)
library("iterators", lib.loc="~/R/win-library/3.1")
vec <- "xy12"
mylist <- list( c("x","a"), c("y","b"), c("a","f") )
iapply( mylist , FUN=function(repvec,x) {
gsub(repvec[1],repvec[2],x)
}, init=vec )
a <- array(1:8, c(2, 2, 2))
it <- iapply(a, 3)
it <- iapply(a, c(2, 3))
as.list(it)
it <- iapply(a, c(1, 3))
as.list(it)
i1 <- iter(1:10)
nextElem(i1)
nextElem(i1)
istate <- iter(state.x77, by='row')
nextElem(istate)
nextElem(istate)
ifun <- iter(function() sample(0:9, 4, replace=TRUE))
nextElem(ifun)
nextElem(ifun)
itrn <- irnorm(10)
nextElem(itrn)
nextElem(itrn)
itru <- irunif(10)
nextElem(itru)
nextElem(itru)
it <- icount(3)
nextElem(it)
nextElem(it)
nextElem(it)
rm(list = ls())
library(iterators)
it <- iter(list(1:2, 3:4))
nextElem(it)
nextElem(it)
tryCatch(nextElem(it), error=function(e) e)
iterators:::iter.iter
iterators:::nextElem.abstractiter
iforever <- function(x) {
nextEl <- function() x
obj <- list(nextElem=nextEl)
class(obj) <- c('iforever', 'abstractiter', 'iter')
obj
}
it <- iforever(42)
nextElem(it)
nextElem(it)
unlist(as.list(it, n=6))
irep <- function(x, times) {
nextEl <- function() {
if (times > 0)
times <<- times - 1
else
stop('StopIteration')
x
}
obj <- list(nextElem=nextEl)
class(obj) <- c('irep', 'abstractiter', 'iter')
obj
}
it <- irep(7, 6)
unlist(as.list(it))
ivector <- function(x, ...) {
i <- 1
it <- idiv(length(x), ...)
nextEl <- function() {
n <- nextElem(it)
ix <- seq(i, length=n)
i <<- i + n
x[ix]
}
obj <- list(nextElem=nextEl)
class(obj) <- c('ivector', 'abstractiter', 'iter')
obj
}
it <- ivector(1:25, chunks=3)
as.list(it)
hasNext <- function(obj, ...) {
UseMethod('hasNext')
}
hasNext.ihasNext <- function(obj, ...) {
obj$hasNext()
}
ihasNext <- function(it) {
if (!is.null(it$hasNext)) return(it)
cache <- NULL
has_next <- NA
nextEl <- function() {
if (!hasNx())
stop('StopIteration', call.=FALSE)
has_next <<- NA
cache
}
hasNx <- function() {
if (!is.na(has_next)) return(has_next)
tryCatch({
cache <<- nextElem(it)
has_next <<- TRUE
},
error=function(e) {
if (identical(conditionMessage(e), 'StopIteration')) {
has_next <<- FALSE
stop(e)
}
} else {
})
has_next
}
obj <- list(nextElem=nextEl, hasNext=hasNx)
class(obj) <- c('ihasNext', 'abstractiter', 'iter')
obj
}
it <- ihasNext(icount(3))
### R code from vignette source 'writing.Rnw'
###################################################
### code chunk number 1: loadLibs
###################################################
library(iterators)
###################################################
### code chunk number 2: iterable1
###################################################
it <- iter(list(1:2, 3:4))
###################################################
### code chunk number 3: iterable2
###################################################
nextElem(it)
nextElem(it)
tryCatch(nextElem(it), error=function(e) e)
###################################################
### code chunk number 4: nextElem.abstractiter
###################################################
iterators:::iter.iter
iterators:::nextElem.abstractiter
###################################################
### code chunk number 5: iter1
###################################################
iforever <- function(x) {
nextEl <- function() x
obj <- list(nextElem=nextEl)
class(obj) <- c('iforever', 'abstractiter', 'iter')
obj
}
###################################################
### code chunk number 6: runiter1
###################################################
it <- iforever(42)
nextElem(it)
nextElem(it)
###################################################
### code chunk number 7: runiter1.part2
###################################################
unlist(as.list(it, n=6))
###################################################
### code chunk number 8: iter2
###################################################
irep <- function(x, times) {
nextEl <- function() {
if (times > 0)
times <<- times - 1
else
stop('StopIteration')
x
}
obj <- list(nextElem=nextEl)
class(obj) <- c('irep', 'abstractiter', 'iter')
obj
}
###################################################
### code chunk number 9: runiter2
###################################################
it <- irep(7, 6)
unlist(as.list(it))
###################################################
### code chunk number 10: iter3
###################################################
ivector <- function(x, ...) {
i <- 1
it <- idiv(length(x), ...)
nextEl <- function() {
n <- nextElem(it)
ix <- seq(i, length=n)
i <<- i + n
x[ix]
}
obj <- list(nextElem=nextEl)
class(obj) <- c('ivector', 'abstractiter', 'iter')
obj
}
###################################################
### code chunk number 11: runiter3
###################################################
it <- ivector(1:25, chunks=3)
as.list(it)
###################################################
### code chunk number 12: generichasnext
###################################################
hasNext <- function(obj, ...) {
UseMethod('hasNext')
}
###################################################
### code chunk number 13: hasnextmethod
###################################################
hasNext.ihasNext <- function(obj, ...) {
obj$hasNext()
}
ihasNext <- function(it) {
if (!is.null(it$hasNext)) return(it)
cache <- NULL
has_next <- NA
nextEl <- function() {
if (!hasNx())
stop('StopIteration', call.=FALSE)
has_next <<- NA
cache
}
hasNx <- function() {
if (!is.na(has_next)) return(has_next)
tryCatch({
cache <<- nextElem(it)
has_next <<- TRUE
},
error=function(e) {
if (identical(conditionMessage(e), 'StopIteration')) {
has_next <<- FALSE
} else {
stop(e)
}
})
has_next
}
obj <- list(nextElem=nextEl, hasNext=hasNx)
class(obj) <- c('ihasNext', 'abstractiter', 'iter')
obj
}
it <- ihasNext(icount(3))
while (hasNext(it)) {
print(nextElem(it))
}
irecycle <- function(it) {
values <- as.list(iter(it))
i <- length(values)
nextEl <- function() {
i <<- i + 1
if (i > length(values)) i <<- 1
values[[i]]
}
obj <- list(nextElem=nextEl)
class(obj) <- c('irecycle', 'abstractiter', 'iter')
obj
}
it <- irecycle(icount(3))
unlist(as.list(it, n=9))
ilimit <- function(it, times) {
it <- iter(it)
nextEl <- function() {
if (times > 0)
times <<- times - 1
else
stop('StopIteration')
nextElem(it)
}
obj <- list(nextElem=nextEl)
class(obj) <- c('ilimit', 'abstractiter', 'iter')
obj
}
irep2 <- function(x, times)
ilimit(iforever(x), times)
it <- ihasNext(irep2('foo', 3))
while (hasNext(it)) {
print(nextElem(it))
}
iterable <- 1:3
n <- 3
it <- ilimit(irecycle(iterable), n * length(iterable))
unlist(as.list(it))
rep(iterable, n)
library("doParallel", lib.loc="~/R/win-library/3.1")
vignette("gettingstartedParallel")
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
ptime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
ptime
stime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %do% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
stime
library(doParallel}
library(doParallel)
registerDoParallel(cores=3)
foreach(i=1:3) %dopar% sqrt(i)
ptime
x <- iris[which(iris[,5] != "setosa"), c(1,5)]
trials <- 10000
ptime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %dopar% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
ptime
stime <- system.time({
r <- foreach(icount(trials), .combine=cbind) %do% {
ind <- sample(100, 100, replace=TRUE)
result1 <- glm(x[ind,2]~x[ind,1], family=binomial(logit))
coefficients(result1)
}
})[3]
stime
getDoParWorkers()
mcoptions <- list(preschedule=FALSE, set.seed=FALSE)
foreach(i=1:3, .options.multicore=mcoptions) %dopar% sqrt(i)
options(cores=2)
getDoParWorkers()
options(cores=3)
getDoParWorkers()
registerDoParallel(4)
options(cores=2)
getDoParWorkers()
stopCluster(cl)
install.packages(c("ape", "arules", "arulesViz", "BH", "bit64", "caret", "chron", "CORElearn", "DEoptimR", "devtools", "diptest", "dplyr", "DSL", "e1071", "ElemStatLearn", "evaluate", "excel.link", "forecast", "foreign", "formatR", "Formula", "gdata", "ggthemes", "glmnet", "gplots", "gridExtra", "gtools", "highlight", "highr", "Hmisc", "htmlTable", "htmlwidgets", "httr", "igraph", "installr", "jsonlite", "knitcitations", "knitr", "lattice", "lava", "lme4", "lmtest", "manipulate", "mapproj", "maps", "markdown", "mclust", "mime", "mnormt", "NLP", "NLPutils", "numDeriv", "openNLP", "openNLPdata", "pander", "party", "pgmm", "plotrix", "plyr", "polspline", "prettyR", "proxy", "pryr", "psych", "qdap", "qdapDictionaries", "qdapRegex", "Quandl", "R.utils", "R6", "rattle", "Rcpp", "RcppArmadillo", "RCurl", "RefManageR", "rgl", "rmarkdown", "rms", "robustbase", "ROCR", "RODBC", "roxygen2", "rpart", "RSNNS", "rstudioapi", "sandwich", "scales", "seriation", "shiny", "shinydashboard", "sjPlot", "sp", "stringdist", "stringi", "stringr", "strucchange", "testthat", "tis", "tm", "topicmodels", "tree", "treemap", "TSP", "TTR", "vcd", "XML"))
library(foreach)
foreach(i=1:10) %do% sample(c("H", "T"), 10000, replace=TRUE)
foreach(i=1:10) %dopar% sample(c("H", "T"), 10000, replace=TRUE)
library(doParallel)
cl <- makeCluster(2)
registerDoParallel(cores = 3)
options(cores)
options()
stopImplicitCluster()
sampleVec <- sample(1:16, size = 16)
sampleOutcomes <- sample(0:1, size = 160, replace = T)
crossprod(sampleVec, sampleOutcomes)
sampleOutcomes <- matrix(sample(0:1, size = 160, replace = T), nrow = 16)
crossprod(sampleVec, sampleOutcomes)
crossprod(rep(NULL, 16), sampleOutcomes)
crossprod(rep(0, 16), sampleOutcomes)
sampleMult <- sample(1:16, size = 64, replace = T)
calcPoints <- function(rankVec){
pointVec <- as.vector(t(crossprod(rankVec, simOutcomes2)))
}
calcPoints <- function(rankVec, outcomeMatrix = simOutcomes2){
pointVec <- as.vector(t(crossprod(rankVec, outcomeMatrix)))
}
calcPoints(sampleVec, sampleOutcomes)
calcPoints(sampleVec, outcomeMatrix = sampleOutcomes)
x <-calcPoints(sampleVec, outcomeMatrix = sampleOutcomes)
x
x <-calcPoints(sampleMult, outcomeMatrix = sampleOutcomes)
sampleMult <- matrix(sample(1:16, size = 64, replace = T), nrow = 16)
x <-calcPoints(sampleMult, outcomeMatrix = sampleOutcomes)
x
is.matrix(sampleMult)
is.matrix(sampleVec)
calcPoints <- function(rankVec, outcomeMatrix = simOutcomes2){
if (is.matrix(sampleVec)) {
pointVec <- as.matrix(t(crossprod(rankVec, outcomeMatrix)), nrow = dim(rankVec)[1])
}
pointVec <- as.vector(t(crossprod(rankVec, outcomeMatrix)))
}
x <-calcPoints(sampleMult, outcomeMatrix = sampleOutcomes)
x
calcPoints <- function(rankVec, outcomeMatrix = simOutcomes2){
if (is.matrix(sampleVec)) {
pointVec <- matrix(t(crossprod(rankVec, outcomeMatrix)), nrow = dim(rankVec)[1])
} else {
pointVec <- as.vector(t(crossprod(rankVec, outcomeMatrix)))
}
pointVec
}
x <-calcPoints(sampleMult, outcomeMatrix = sampleOutcomes)
x
x <-calcPoints(sampleVec, outcomeMatrix = sampleOutcomes)
x
x <-calcPoints(sampleMult, outcomeMatrix = sampleOutcomes)
x
sampleMult
apply(sampleMult, 2, calcPoints, outcomeMatrix = sampleOutcomes)
calcPoints <- function(rankVec, outcomeMatrix = simOutcomes2){
pointVec <- as.vector(t(crossprod(rankVec, outcomeMatrix)))
}
shiny::runApp('GitHub/fs2')
shiny::runApp('GitHub/wtpP')
shiny::runApp('GitHub/wtpP')
shiny::runApp('GitHub/straightsims')
shiny::runApp('GitHub/straightsims')
shiny::runApp('GitHub/straightsims')
shiny::runApp('GitHub/straightsims')
shiny::runApp('GitHub/straightsims')
shiny::runApp('GitHub/fs2')
shiny::runApp('GitHub/fs2')
shiny::runApp('GitHub/fs2')
shiny::runApp('GitHub/fs2')
shiny::runApp('GitHub/straightsims/shinyApp')
shiny::runApp('GitHub/straightsims/shinyApp')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
install.packages("shinythemes")
library("shinythemes", lib.loc="~/R/win-library/3.1")
install.packages("googleVis")
library("googleVis", lib.loc="~/R/win-library/3.1")
demo()
demo(package = "googleVis")
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
shiny::runApp('GitHub/straightsims/weeklyApp_straight')
setwd("D:/Documents/GitHub/straightsims/weeklyApp_straight")
load("app2015wk01.RData")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rm(list = ls())
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?gvisTable
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
